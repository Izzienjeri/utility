File: ./components/Auth.tsx
================================================================================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import {
  Lock,
  UserPlus,
  Mail,
  Phone,
  Eye,
  EyeOff,
  ArrowRight,
} from "lucide-react";
import { toast } from "sonner";

const API_BASE_URL = "http://127.0.0.1:5000";

interface AuthProps {
  initialRoute: "login" | "register" | "billForm" | "dashboard" | "welcome";
}

const Auth: React.FC<AuthProps> = ({ initialRoute }) => {
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const router = useRouter();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !password) {
      toast.error("Please enter both email and password.");
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok) {
        const accessToken = data.access_token;
        localStorage.setItem("accessToken", accessToken);
        localStorage.setItem("userName", data.user.full_name);

        const isNewUser = data.is_new_user;
        localStorage.setItem("isFirstTimeUser", JSON.stringify(isNewUser));

        if (isNewUser) {
          router.push("/?page=welcome");
        } else {
          router.push("/?page=dashboard&ion=overview");
        }
      } else {
        toast.error(data.message || "Login failed.");
      }
    } catch (err) {
      toast.error("An error occurred during login.");
      console.error(err);
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!fullName || !email || !phone || !password || !confirmPassword) {
      toast.error("Please fill in all fields.");
      return;
    }

    if (password !== confirmPassword) {
      toast.error("Passwords do not match.");
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ full_name: fullName, email, phone, password }),
      });

      const data = await response.json();

      if (response.ok) {
        const accessToken = data.access_token;
        localStorage.setItem("accessToken", accessToken);
        localStorage.setItem("userName", data.user.full_name);

        const isNewUser = data.is_new_user;
        localStorage.setItem("isFirstTimeUser", JSON.stringify(isNewUser));
        toast.success(data.message || "Registration successful!");
        setError("");
        router.push("/?page=welcome");
      } else {
        if (data.errors) {
          const errorMessages = Object.entries(data.errors)
            .map(([field, message]) => `${field}: ${message}`)
            .join(", ");
          toast.error(`Registration failed: ${errorMessages}`);
        } else {
          toast.error(data.message || "Registration failed.");
        }
        setSuccessMessage("");
        console.error("Registration error:", data);
      }
    } catch (err) {
      toast.error("An error occurred during registration.");
      setSuccessMessage("");
      console.error("Registration fetch error:", err);
    }
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  const buttonVariants = {
    hover: { scale: 1.02, transition: { duration: 0.2 } },
    tap: { scale: 0.98, transition: { duration: 0.2 } },
  };

  const renderLoginForm = () => (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <motion.div
        className="w-full max-w-md"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        <motion.div
          className="rounded-2xl shadow-md overflow-hidden bg-gradient-to-br from-blue-900 to-teal-500 text-white"
          variants={itemVariants}
        >
          <div className="px-8 pt-6 pb-8">
            <motion.div
              className="flex flex-col items-center mb-6"
              variants={itemVariants}
            >
              <div className="w-14 h-14 rounded-full flex items-center justify-center bg-white text-blue-800 mb-3 shadow-md">
                <Lock className="text-blue-800" size={28} />
              </div>
              <h2 className="text-2xl font-semibold ">Welcome Back</h2>
              <p className="text-gray-300 mt-1 text-center">
                Sign in to access your account
              </p>
            </motion.div>

            {error && (
              <motion.div
                className="mb-4 p-3 bg-red-50 border border-red-200 text-red-500 text-sm rounded-md"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {error}
              </motion.div>
            )}

            <form onSubmit={handleLogin}>
              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-200 text-sm font-medium mb-2"
                  htmlFor="email"
                >
                  <Mail className="inline-block mr-1" size={16} />
                  Email Address
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="email"
                    type="email"
                    placeholder="your.email@example.com"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
              </motion.div>

              <motion.div className="mb-6" variants={itemVariants}>
                <label
                  className="block text-gray-200 text-sm font-medium mb-2"
                  htmlFor="password"
                >
                  <Lock className="inline-block mr-1" size={16} />
                  Password
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="••••••••••"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    onClick={togglePasswordVisibility}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white focus:outline-none transition-colors duration-200"
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </motion.div>

              <motion.div
                className="flex items-center justify-between"
                variants={itemVariants}
              >
                <motion.button
                  className="w-full bg-white text-blue-800 font-medium py-2.5 px-5 rounded-md flex items-center justify-center shadow-md hover:bg-gray-200 transition-colors duration-300"
                  type="submit"
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                >
                  <span>Sign In</span>
                  <ArrowRight className="ml-2" size={16} />
                </motion.button>
              </motion.div>
            </form>

            <motion.div className="mt-6 text-center" variants={itemVariants}>
              <p className="text-gray-300">
                Don't have an account?{" "}
                <button
                  onClick={() => router.push("/?page=register")}
                  className="text-white font-medium hover:underline focus:outline-none"
                >
                  Sign Up
                </button>
              </p>
            </motion.div>
          </div>
        </motion.div>
      </motion.div>
    </div>
  );

  const renderRegisterForm = () => (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <motion.div
        className="w-full max-w-md"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        <motion.div
          className="rounded-2xl shadow-md overflow-hidden bg-gradient-to-br from-blue-900 to-teal-500 text-white"
          variants={itemVariants}
        >
          <div className="px-8 pt-6 pb-8">
            <motion.div
              className="flex flex-col items-center mb-6"
              variants={itemVariants}
            >
              <div className="w-14 h-14 rounded-full flex items-center justify-center bg-white text-blue-800 mb-3 shadow-md">
                <UserPlus className="text-blue-800" size={28} />
              </div>
              <h2 className="text-2xl font-semibold ">Create Account</h2>
              <p className="text-gray-300 mt-1 text-center">Join us today!</p>
            </motion.div>

            {error && (
              <motion.div
                className="mb-4 p-3 bg-red-50 border border-red-200 text-red-500 text-sm rounded-md"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {error}
              </motion.div>
            )}

            {successMessage && (
              <motion.div
                className="mb-4 p-3 bg-green-50 border border-green-200 text-green-600 text-sm rounded-md"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {successMessage}
              </motion.div>
            )}

            <form onSubmit={handleRegister}>
              <motion.div className="mb-3" variants={itemVariants}>
                <label
                  className="block text-gray-200 text-sm font-medium mb-2"
                  htmlFor="fullName"
                >
                  <UserPlus className="inline-block mr-1" size={16} />
                  Full Name
                </label>
                <input
                  className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                  id="fullName"
                  type="text"
                  placeholder="John Doe"
                  value={fullName}
                  onChange={(e) => setFullName(e.target.value)}
                />
              </motion.div>

              <motion.div className="mb-3" variants={itemVariants}>
                <label
                  className="block text-gray-200 text-sm font-medium mb-2"
                  htmlFor="email"
                >
                  <Mail className="inline-block mr-1" size={16} />
                  Email Address
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="email"
                    type="email"
                    placeholder="your.email@example.com"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
              </motion.div>

              <motion.div className="mb-3" variants={itemVariants}>
                <label
                  className="block text-gray-200 text-sm font-medium mb-2"
                  htmlFor="phone"
                >
                  <Phone className="inline-block mr-1" size={16} />
                  Phone Number
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="phone"
                    type="tel"
                    placeholder="+1 (555) 123-4567"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                  />
                </div>
              </motion.div>

              <motion.div className="mb-3" variants={itemVariants}>
                <label
                  className="block text-gray-200 text-sm font-medium mb-2"
                  htmlFor="password"
                >
                  <Lock className="inline-block mr-1" size={16} />
                  Password
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="••••••••••"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    onClick={togglePasswordVisibility}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white focus:outline-none transition-colors duration-200"
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </motion.div>

              <motion.div className="mb-5" variants={itemVariants}>
                <label
                  className="block text-gray-200 text-sm font-medium mb-2"
                  htmlFor="confirmPassword"
                >
                  <Lock className="inline-block mr-1" size={16} />
                  Confirm Password
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="confirmPassword"
                    type={showConfirmPassword ? "text" : "password"}
                    placeholder="••••••••••"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    onClick={toggleConfirmPasswordVisibility}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white focus:outline-none transition-colors duration-200"
                  >
                    {showConfirmPassword ? (
                      <EyeOff size={20} />
                    ) : (
                      <Eye size={20} />
                    )}
                  </button>
                </div>
              </motion.div>

              <motion.div
                className="flex items-center justify-between"
                variants={itemVariants}
              >
                <motion.button
                  className="w-full bg-white text-blue-800 font-medium py-2.5 px-5 rounded-md flex items-center justify-center shadow-md hover:bg-gray-200 transition-colors duration-300"
                  type="submit"
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                >
                  <span>Create Account</span>
                  <ArrowRight className="ml-2" size={16} />
                </motion.button>
              </motion.div>
            </form>

            <motion.div className="mt-6 text-center" variants={itemVariants}>
              <p className="text-gray-300">
                Already have an account?{" "}
                <button
                  onClick={() => router.push("/?page=login")}
                  className="text-white font-medium hover:underline focus:outline-none"
                >
                  Sign In
                </button>
              </p>
            </motion.div>
          </div>
        </motion.div>
      </motion.div>
    </div>
  );

  let content;
  switch (initialRoute) {
    case "login":
      content = renderLoginForm();
      break;
    case "register":
      content = renderRegisterForm();
      break;
    default:
      content = renderLoginForm();
  }

  return content;
};

export default Auth;

================================================================================
File: ./components/WelcomeScreen.tsx
================================================================================
"use client";

import { motion } from "framer-motion";
import { useRouter } from "next/navigation";
import { Heart, ArrowRight } from "lucide-react";

const WelcomeScreen = () => {
  const router = useRouter();

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  const buttonVariants = {
    hover: { scale: 1.02, transition: { duration: 0.2 } },
    tap: { scale: 0.98, transition: { duration: 0.2 } },
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <motion.div
        className="w-full max-w-md"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        <motion.div
          className="rounded-2xl shadow-md overflow-hidden bg-gradient-to-br from-blue-900 to-teal-500 text-white"
          variants={itemVariants}
        >
          <div className="px-8 pt-6 pb-8">
            <motion.div
              className="flex flex-col items-center mb-6"
              variants={itemVariants}
            >
              <div className="w-14 h-14 rounded-full flex items-center justify-center bg-white text-blue-800 mb-3 shadow-md">
                <Heart className="text-blue-800" size={28} />
              </div>
              <h2 className="text-2xl font-semibold ">Welcome to PayTrack!</h2>
              <p className="text-gray-300 mt-1 text-center">
                Simplify your bill payments and stay on top of your expenses.
              </p>
              <p className="text-gray-300 mt-1 text-center">
                Get started now and never miss a payment again!
              </p>
            </motion.div>

            <motion.div
              className="flex items-center justify-center"
              variants={itemVariants}
            >
              <motion.button
                className="w-full bg-white text-blue-800 font-medium py-2.5 px-5 rounded-md flex items-center justify-center shadow-md hover:bg-gray-200 transition-colors duration-300"
                variants={buttonVariants}
                whileHover="hover"
                whileTap="tap"
                onClick={() => router.push("/?page=billForm")}
              >
                <span>Get Started</span>
                <ArrowRight className="ml-2" size={16} />
              </motion.button>
            </motion.div>
          </div>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default WelcomeScreen;

================================================================================
File: ./components/Dashboard.tsx
================================================================================
"use client";

import { useState } from "react";
import Overview from "./dashboard/Overview";
import ManageBills from "./dashboard/ManageBills";
import Notifications from "./dashboard/Notifications";

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState("overview");

  const handleTabChange = (tab: string) => {
    setActiveTab(tab);
  };

  return (
    <div className="container mx-auto py-8">
      <div className="mb-4">
        <nav className="flex space-x-4">
          <button
            className={`px-4 py-2 rounded-md text-gray-700 ${
              activeTab === "overview"
                ? "bg-teal-500 text-white font-semibold"
                : "bg-gray-100 hover:bg-gray-200"
            }`}
            onClick={() => handleTabChange("overview")}
          >
            Overview
          </button>
          <button
            className={`px-4 py-2 rounded-md text-gray-700 ${
              activeTab === "manage-bills"
                ? "bg-teal-500 text-white font-semibold"
                : "bg-gray-100 hover:bg-gray-200"
            }`}
            onClick={() => handleTabChange("manage-bills")}
          >
            Manage Bills
          </button>
          <button
            className={`px-4 py-2 rounded-md text-gray-700 ${
              activeTab === "notifications"
                ? "bg-teal-500 text-white font-semibold"
                : "bg-gray-100 hover:bg-gray-200"
            }`}
            onClick={() => handleTabChange("notifications")}
          >
            Notifications
          </button>
        </nav>
      </div>

      {/* Tab Content */}
      <div className="mt-4">
        {activeTab === "overview" && <Overview />}
        {activeTab === "manage-bills" && <ManageBills />}
        {activeTab === "notifications" && <Notifications />}
      </div>
    </div>
  );
};

export default Dashboard;

================================================================================
File: ./components/BillForm.tsx
================================================================================
"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { useRouter } from "next/navigation";
import {
  Calendar,
  Wallet,
  Home,
  Lightbulb,
  Droplet,
  Wifi,
  Trash2,
  ArrowRight,
} from "lucide-react";
import { toast } from "sonner";

const API_BASE_URL = "http://127.0.0.1:5000";

interface BillFormProps {
  userId: string;
  editBillId?: string | null;
}

const BillForm: React.FC<BillFormProps> = ({ userId, editBillId }) => {
  const [billType, setBillType] = useState("");
  const [amount, setAmount] = useState("");
  const [paybillNumber, setPaybillNumber] = useState("");
  const [accountNumber, setAccountNumber] = useState("");
  const [dueDate, setDueDate] = useState("");
  const [error, setError] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [isBillTypeOpen, setIsBillTypeOpen] = useState(false);
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [isLoadingToken, setIsLoadingToken] = useState(true);
  const router = useRouter();
  const [isEditMode, setIsEditMode] = useState(false);
  const [isRecurring, setIsRecurring] = useState(false);

  const billTypes = [
    {
      value: "Electricity",
      icon: <Lightbulb className="inline-block mr-1" size={14} />,
    },
    {
      value: "Rent",
      icon: <Home className="inline-block mr-1" size={14} />,
    },
    {
      value: "Water",
      icon: <Droplet className="inline-block mr-1" size={14} />,
    },
    { value: "WiFi", icon: <Wifi className="inline-block mr-1" size={14} /> },
    {
      value: "Trash",
      icon: <Trash2 className="inline-block mr-1" size={14} />,
    },
  ];

  useEffect(() => {
    const getToken = async () => {
      if (typeof window !== "undefined" && localStorage) {
        const token = localStorage.getItem("accessToken");
        if (token) {
          setAccessToken(token);
        } else {
          console.warn("No access token found in localStorage.");
          toast.error("Authentication required. Please login.");
          router.push("/?page=login");
          return;
        }
        setIsLoadingToken(false);

        if (editBillId) {
          setIsEditMode(true);
          try {
            const response = await fetch(
              `${API_BASE_URL}/bills/${editBillId}`,
              {
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${token}`,
                },
              }
            );

            if (response.ok) {
              const billData = await response.json();
              setBillType(billData.bill_type);
              setAmount(billData.amount);
              setPaybillNumber(billData.paybill_number || "");
              setAccountNumber(billData.account_number || "");
              setDueDate(billData.due_date);
            } else {
              toast.error("Failed to fetch bill for editing.");
            }
          } catch (err) {
            toast.error("An error occurred while fetching the bill.");
            console.error(err);
          }
        } else {
          setIsEditMode(false);
        }
      } else {
        console.warn("localStorage is not available.");
        toast.error(
          "localStorage is not available. Please enable cookies or use a different browser."
        );
        setIsLoadingToken(false);
      }
    };

    getToken();

    const isFirstTimeUser = localStorage.getItem("isFirstTimeUser");
    if (!isFirstTimeUser && !editBillId) {
      router.push("/?page=dashboard&ion=overview");
    }
  }, [router, editBillId]);

  const createRecurringBills = async (baseBill: any, token: string) => {
    const billsToCreate = [];
    let nextDueDate = new Date(baseBill.due_date);

    for (let i = 1; i <= 11; i++) {
      nextDueDate.setMonth(nextDueDate.getMonth() + 1);
      const newBill = {
        ...baseBill,
        due_date: nextDueDate.toISOString().split("T")[0],
      };
      billsToCreate.push(newBill);
    }

    try {
      const response = await fetch(`${API_BASE_URL}/bills/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(billsToCreate),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success("Bill and recurring bills added successfully!");
      } else {
        toast.error(data.message || "Failed to add recurring bills.");
      }
    } catch (err) {
      toast.error("An error occurred while adding the recurring bills.");
      console.error(err);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (isLoadingToken) {
      toast.error("Please wait while the authentication token is loaded.");
      return;
    }

    if (!accessToken) {
      toast.error("Authentication required. Please login.");
      return;
    }

    if (!billType || !amount || !paybillNumber || !accountNumber || !dueDate) {
      toast.error(
        "Please fill in all required fields, including Paybill and Account Numbers."
      );
      return;
    }

    if (!paybillNumber || !accountNumber) {
      toast.error("Paybill requires both Paybill Number and Account Number.");
      return;
    }

    try {
      const url = editBillId
        ? `${API_BASE_URL}/bills/${editBillId}`
        : `${API_BASE_URL}/bills/`;
      const method = editBillId ? "PUT" : "POST";

      const requestBody: any = {
        bill_type: billType,
        amount: amount,
        payment_option: "paybill",
        paybill_number: paybillNumber,
        account_number: accountNumber,
        due_date: dueDate,
      };

      const response = await fetch(url, {
        method: method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success(
          editBillId ? "Bill updated successfully!" : "Bill added successfully!"
        );
        setError("");
        setBillType("");
        setAmount("");
        setPaybillNumber("");
        setAccountNumber("");
        setDueDate("");

        localStorage.removeItem("isFirstTimeUser");
        router.push("/?page=dashboard&ion=manage-bills");

        if (isRecurring && !editBillId) {
          await createRecurringBills(requestBody, accessToken);
        }
      } else {
        toast.error(data.message || "Failed to add bill.");
        setSuccessMessage("");
      }
    } catch (err) {
      toast.error("An error occurred while adding the bill.");
      setSuccessMessage("");
      console.error(err);
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  const buttonVariants = {
    hover: { scale: 1.02, transition: { duration: 0.2 } },
    tap: { scale: 0.98, transition: { duration: 0.2 } },
  };

  if (isLoadingToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div>Loading authentication token...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      {accessToken ? (
        <motion.div
          className="w-full max-w-md"
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          exit="exit"
        >
          <motion.div
            className="rounded-2xl shadow-md overflow-hidden bg-gradient-to-br from-blue-900 to-teal-500 text-white"
            variants={itemVariants}
          >
            <div className="px-8 pt-6 pb-8">
              <motion.div
                className="flex flex-col items-center mb-6"
                variants={itemVariants}
              >
                <div className="w-14 h-14 rounded-full flex items-center justify-center bg-white text-blue-800 mb-3 shadow-md">
                  <Wallet className="text-blue-800" size={28} />
                </div>
                <h2 className="text-2xl font-semibold ">
                  {isEditMode ? "Edit Bill" : "Add a Bill"}
                </h2>
                <p className="text-gray-300 mt-1 text-center italic">
                  Currently, we only support Paybill payments.
                </p>
              </motion.div>

              {error && (
                <motion.div
                  className="mb-4 p-3 bg-red-50 border border-red-200 text-red-500 text-sm rounded-md"
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  {error}
                </motion.div>
              )}

              {successMessage && (
                <motion.div
                  className="mb-4 p-3 bg-green-50 border border-green-200 text-green-600 text-sm rounded-md"
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  {successMessage}
                </motion.div>
              )}

              <form onSubmit={handleSubmit}>
                <motion.div className="mb-3" variants={itemVariants}>
                  <label
                    className="block text-gray-200 text-sm font-medium mb-2"
                    htmlFor="billType"
                  >
                    <span className="inline-block mr-1">
                      <Home size={16} />
                    </span>
                    Bill Type
                  </label>
                  <div className="relative">
                    <button
                      type="button"
                      className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none flex items-center justify-between text-black"
                      onClick={() => setIsBillTypeOpen(!isBillTypeOpen)}
                    >
                      {billType || "Select Bill Type"}
                      <span>▼</span>
                    </button>
                    {isBillTypeOpen && (
                      <div className="absolute left-0 mt-1 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                        <div
                          className="py-1"
                          role="menu"
                          aria-orientation="vertical"
                          aria-labelledby="options-menu"
                        >
                          {billTypes.map((type) => (
                            <button
                              key={type.value}
                              className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                              role="menuitem"
                              onClick={() => {
                                setBillType(type.value);
                                setIsBillTypeOpen(false);
                              }}
                            >
                              <span className="inline-block mr-1">
                                {type.icon}
                              </span>
                              {type.value}
                            </button>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </motion.div>

                <motion.div className="mb-3" variants={itemVariants}>
                  <label
                    className="block text-gray-200 text-sm font-medium mb-2"
                    htmlFor="amount"
                  >
                    <span className="inline-block mr-1">
                      <Wallet size={16} />
                    </span>
                    Amount
                  </label>
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="amount"
                    type="number"
                    placeholder="Enter Amount"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                  />
                </motion.div>

                <motion.div className="mb-3" variants={itemVariants}>
                  <label
                    className="block text-gray-200 text-sm font-medium mb-2"
                    htmlFor="paybillNumber"
                  >
                    Paybill Number (Business Number)
                  </label>
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="paybillNumber"
                    type="text"
                    placeholder="Enter Paybill Number"
                    value={paybillNumber}
                    onChange={(e) => setPaybillNumber(e.target.value)}
                  />
                </motion.div>
                <motion.div className="mb-3" variants={itemVariants}>
                  <label
                    className="block text-gray-200 text-sm font-medium mb-2"
                    htmlFor="accountNumber"
                  >
                    Account Number
                  </label>
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="accountNumber"
                    type="text"
                    placeholder="Enter Account Number"
                    value={accountNumber}
                    onChange={(e) => setAccountNumber(e.target.value)}
                  />
                </motion.div>

                <motion.div className="mb-5" variants={itemVariants}>
                  <label
                    className="block text-gray-200 text-sm font-medium mb-2"
                    htmlFor="dueDate"
                  >
                    <span className="inline-block mr-1">
                      <Calendar size={16} />
                    </span>
                    Due Date
                  </label>
                  <input
                    className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none text-black"
                    id="dueDate"
                    type="date"
                    value={dueDate}
                    onChange={(e) => setDueDate(e.target.value)}
                  />
                </motion.div>

                {/* NEW: Recurring Bill Toggle */}
                <motion.div className="mb-3" variants={itemVariants}>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="mr-2 h-5 w-5 text-teal-500 focus:ring-teal-300"
                      checked={isRecurring}
                      onChange={(e) => setIsRecurring(e.target.checked)}
                      disabled={isEditMode}
                    />
                    <span className="text-gray-200 text-sm font-medium">
                      Create Recurring Bills (Next 11 Months)
                    </span>
                  </label>
                </motion.div>

                <motion.div
                  className="flex items-center justify-between"
                  variants={itemVariants}
                >
                  <motion.button
                    className="w-full bg-white text-blue-800 font-medium py-2.5 px-5 rounded-md flex items-center justify-center shadow-md hover:bg-gray-200 transition-colors duration-300"
                    type="submit"
                    variants={buttonVariants}
                    whileHover="hover"
                    whileTap="tap"
                  >
                    <span>{isEditMode ? "Update Bill" : "Add Bill"}</span>
                    <ArrowRight className="ml-2" size={16} />
                  </motion.button>
                </motion.div>
              </form>
            </div>
          </motion.div>
        </motion.div>
      ) : (
        <div>Authentication required. Please login.</div>
      )}
    </div>
  );
};

export default BillForm;

================================================================================
File: ./components/NavBar.tsx
================================================================================
"use client";

import { useRouter } from "next/navigation";
import { LogOut } from "lucide-react";
import { motion } from "framer-motion";

const NavBar = () => {
  const router = useRouter();

  const handleLogout = () => {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("isFirstTimeUser");
    router.push("/?page=login");
  };

  return (
    <nav className="bg-white shadow-md py-4">
      <div className="container mx-auto flex items-center justify-between">
        <motion.h1 className="text-2xl font-bold text-gray-800">
          BillEase
        </motion.h1>

        <motion.button
          className="text-gray-700 hover:text-gray-900 flex items-center"
          onClick={handleLogout}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <LogOut className="mr-2 h-5 w-5" />
          Logout
        </motion.button>
      </div>
    </nav>
  );
};

export default NavBar;

================================================================================
File: ./components/dashboard/Notifications.tsx
================================================================================
"use client";

import { motion } from "framer-motion";

const Notifications = () => {
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      <motion.h2
        className="text-2xl font-semibold mb-4 text-gray-800"
        variants={itemVariants}
      >
        Notifications & Reminders
      </motion.h2>
      <p className="text-gray-600 mt-2 text-center">
        *We currently only support Paybill payments.*
      </p>
      <motion.div
        className="bg-white shadow-md rounded-md p-4 mb-4"
        variants={itemVariants}
      >
        <h3 className="text-lg font-medium mb-2 text-gray-700">
          View Reminders
        </h3>
        <p className="text-gray-600">See upcoming email reminders...</p>
      </motion.div>
      <motion.div
        className="bg-white shadow-md rounded-md p-4 mb-4"
        variants={itemVariants}
      >
        <h3 className="text-lg font-medium mb-2 text-gray-700">
          Resend Reminder
        </h3>
        <p className="text-gray-600">
          If a user wants to get another reminder...
        </p>
      </motion.div>
      <motion.div
        className="bg-white shadow-md rounded-md p-4"
        variants={itemVariants}
      >
        <h3 className="text-lg font-medium mb-2 text-gray-700">
          Unpaid Bill Alerts
        </h3>
        <p className="text-gray-600">Notifications for overdue payments...</p>
      </motion.div>
    </motion.div>
  );
};

export default Notifications;

================================================================================
File: ./components/dashboard/Overview.tsx
================================================================================
"use client";

import { motion } from "framer-motion";
import { useState, useEffect, ReactNode } from "react";
import { format, isWithinInterval, parseISO } from "date-fns";
import { toast } from "sonner";
import {
  Clock,
  CheckCircle,
  AlertTriangle,
  Wallet,
  Calendar,
  LucideIcon,
  Zap,
  Lightbulb,
  Home,
  Droplet,
  Wifi,
  Trash2,
} from "lucide-react";
import { useRouter } from "next/navigation";

const API_BASE_URL = "http://127.0.0.1:5000";

interface Bill {
  id: string;
  bill_type: string;
  amount: number;
  due_date: string;
  status: string;
}

interface Transaction {
  id: string;
  bill_id: string;
  user_id: string;
  amount_paid: number;
  payment_reference: string;
  status: string;
  paid_at: string;
  bill?: Bill;
}

const Overview = () => {
  const [upcomingBills, setUpcomingBills] = useState<Bill[]>([]);
  const [totalDue, setTotalDue] = useState(0);
  const [recentTransactions, setRecentTransactions] = useState<Transaction[]>(
    []
  );
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [paymentStatus, setPaymentStatus] = useState<string | null>(null);
  const [paymentTimeoutId, setPaymentTimeoutId] =
    useState<NodeJS.Timeout | null>(null);

  const [billDetails, setBillDetails] = useState<{ [billId: string]: Bill }>(
    {}
  );

  type PaymentStatusIcons = {
    icon: LucideIcon;
    color: string;
  };

  interface BillType {
    value: string;
    icon: ReactNode;
  }

  const paymentStatusIcons: {
    [key: string]: PaymentStatusIcons;
  } = {
    Completed: { icon: CheckCircle, color: "text-green-500" },
    Pending: { icon: Clock, color: "text-yellow-500" },
    Failed: { icon: AlertTriangle, color: "text-red-500" },
  };

  const router = useRouter();

  const billTypeIcons: { [key: string]: BillType } = {
    Electricity: {
      value: "Electricity",
      icon: <Lightbulb className="inline-block mr-1" size={16} />,
    },
    Rent: {
      value: "Rent",
      icon: <Home className="inline-block mr-1" size={16} />,
    },
    Water: {
      value: "Water",
      icon: <Droplet className="inline-block mr-1" size={16} />,
    },
    WiFi: {
      value: "WiFi",
      icon: <Wifi className="inline-block mr-1" size={16} />,
    },
    Trash: {
      value: "Trash",
      icon: <Trash2 className="inline-block mr-1" size={16} />,
    },
  };

  const billCardColors: { [key: string]: string } = {
    Electricity: "bg-yellow-50",
    Rent: "bg-red-50",
    Water: "bg-blue-50",
    WiFi: "bg-purple-50",
    Trash: "bg-gray-50",
  };

  useEffect(() => {
    const fetchBills = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const token = localStorage.getItem("accessToken");
        if (!token) {
          setError("No access token found. Please log in.");
          toast.error("No access token found. Please log in.");
          return;
        }
        setAccessToken(token);

        const billsResponse = await fetch(`${API_BASE_URL}/bills/`, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!billsResponse.ok) {
          throw new Error(
            `HTTP error fetching bills! status: ${billsResponse.status}`
          );
        }

        const billsData = await billsResponse.json();

        const today = new Date();
        const tenDaysFromNow = new Date();
        tenDaysFromNow.setDate(today.getDate() + 10);

        const upcoming = billsData.filter((bill: Bill) => {
          const dueDate = parseISO(bill.due_date);
          return isWithinInterval(dueDate, {
            start: today,
            end: tenDaysFromNow,
          });
        });

        setUpcomingBills(upcoming);

        const total = upcoming.reduce((sum: number, bill: Bill) => {
          if (bill.status === "Pending") {
            return sum + bill.amount;
          }
          return sum;
        }, 0);
        setTotalDue(total);

        const transactionsResponse = await fetch(
          `${API_BASE_URL}/payments/history`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!transactionsResponse.ok) {
          console.warn("Failed to fetch transactions.");
          setRecentTransactions([]);
          toast.error("Failed to fetch transactions.");
        } else {
          let transactionsData: Transaction[] =
            await transactionsResponse.json();
          setRecentTransactions(transactionsData);

          const billMap: { [billId: string]: Bill } = {};
          transactionsData.forEach((transaction) => {
            if (transaction.bill) {
              billMap[transaction.bill.id] = transaction.bill;
            }
          });
          setBillDetails(billMap);
        }
      } catch (e: any) {
        setError(`Failed to fetch data: ${e.message}`);
        console.error("Error fetching data:", e);
        setRecentTransactions([]);
        toast.error(`Failed to fetch data: ${e.message}`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchBills();
  }, []);

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      {/* Welcome Message */}
      <motion.div className="mb-4" variants={itemVariants}>
        {" "}
        {/* Reduced margin */}
        <h2 className="text-2xl font-semibold text-gray-800">
          Welcome back, {localStorage.getItem("userName") || "User"}!
        </h2>
        <p className="text-gray-600">Here's a summary of your bills.</p>
      </motion.div>

      {isLoading ? (
        <div className="flex items-center justify-center">
          <Clock className="animate-spin mr-2" /> Loading data...
        </div>
      ) : null}

      {error && <div className="text-red-500 mb-4">Error: {error}</div>}

      {/* Billing Card */}
      <motion.div
        className="bg-gradient-to-br from-blue-900 to-teal-500 text-white rounded-xl shadow-md p-4 mb-4"
        variants={itemVariants}
      >
        <h3 className="text-xl font-semibold mb-1">Total Due</h3>{" "}
        {/* Reduced margin */}
        <p className="text-3xl font-bold">Ksh {totalDue}</p>{" "}
        {/* Adjusted size */}
        <p className="text-sm mt-1">Due within the next 10 days.</p>{" "}
        {/* Reduced margin */}
      </motion.div>

      {/* Grid Section for Individual Bills */}
      <motion.div
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
        variants={itemVariants}
      >
        {upcomingBills.map((bill) => (
          <motion.div
            key={bill.id}
            className={`rounded-xl shadow-md p-3 flex flex-col justify-between ${
              billCardColors[bill.bill_type] || "bg-gray-50"
            } border border-gray-200`}
            whileHover={{
              scale: 1.05,
              boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
            }}
            whileTap={{ scale: 0.98 }}
          >
            <div>
              <h4 className="text-lg font-semibold text-gray-700 flex items-center mb-1">
                {" "}
                {/* Added margin */}
                {billTypeIcons[bill.bill_type]?.icon}
                {bill.bill_type}
              </h4>
              <p className="text-gray-500 text-sm">
                {" "}
                {/* Adjusted color */}
                Due: {format(parseISO(bill.due_date), "MMM dd, yyyy")}
              </p>
              <p className="text-gray-800 font-bold text-xl mt-2">
                Ksh {bill.amount}
              </p>{" "}
              {/* Adjusted size and margin */}
            </div>
            <button
              onClick={() => router.push(`/?page=dashboard&ion=manage-bills`)}
              className="bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded-md mt-3 text-sm"
            >
              Pay Now
            </button>
          </motion.div>
        ))}
      </motion.div>

      {/* Recent Transactions Section (moved to the bottom) */}
      <motion.div
        className="bg-white shadow-md rounded-xl p-4 mt-6"
        variants={itemVariants}
      >
        <h3 className="text-lg font-medium mb-2 text-gray-700 flex items-center">
          <Clock className="mr-2" /> Recent Transactions
        </h3>
        {recentTransactions.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead>
                <tr className="bg-gray-50">
                  <th className="px-4 py-2 text-left text-gray-600 text-sm font-semibold">
                    Bill Type
                  </th>
                  <th className="px-4 py-2 text-left text-gray-600 text-sm font-semibold">
                    Date
                  </th>
                  <th className="px-4 py-2 text-left text-gray-600 text-sm font-semibold">
                    Amount
                  </th>
                  <th className="px-4 py-2 text-left text-gray-600 text-sm font-semibold">
                    Status
                  </th>
                </tr>
              </thead>
              <tbody>
                {recentTransactions.map((transaction) => {
                  const formattedDate = format(
                    new Date(transaction.paid_at),
                    "MMM dd, yyyy, h:mm a"
                  );
                  const billType =
                    transaction.bill?.bill_type || "Unknown Bill Type";
                  const statusInfo = paymentStatusIcons[transaction.status] || {
                    icon: AlertTriangle,
                    color: "text-gray-500",
                  };
                  const StatusIcon = statusInfo.icon;

                  return (
                    <tr
                      key={transaction.id}
                      className="border-b border-gray-200"
                    >
                      <td className="px-4 py-2 text-gray-700 text-sm">
                        {billType}
                      </td>
                      <td className="px-4 py-2 text-gray-700 text-sm">
                        {formattedDate}
                      </td>
                      <td className="px-4 py-2 text-gray-700 text-sm">
                        Ksh {transaction.amount_paid}
                      </td>
                      <td className="px-4 py-2 text-gray-700 text-sm">
                        <div className="flex items-center">
                          <StatusIcon
                            className={`mr-1 w-4 h-4 ${statusInfo.color}`}
                          />
                          {transaction.status}
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="text-gray-600">No recent transactions.</p>
        )}
      </motion.div>
    </motion.div>
  );
};

export default Overview;

================================================================================
File: ./components/dashboard/ManageBills.tsx
================================================================================
// File: ./components/dashboard/ManageBills.tsx
// ManageBills.tsx
"use client";

import { motion } from "framer-motion";
import { useState, useEffect, useCallback, ReactNode } from "react";
import { useRouter } from "next/navigation";
import {
  Edit,
  Trash2,
  DollarSign,
  Plus,
  Lightbulb,
  Home,
  Droplet,
  Wifi,
  Calendar,
  AlertTriangle,
  Clock,
} from "lucide-react";
import { Transition } from "@headlessui/react";
import { format, parseISO } from "date-fns";
import { toast } from "sonner";
import { ClipLoader } from "react-spinners";

const API_BASE_URL = "http://localhost:5000";

interface Bill {
  id: string;
  bill_type: string;
  amount: number;
  due_date: string;
  status: string;
  payment_option: string;
  paybill_number: string | null;
  till_number: string | null;
  account_number: string | null;
}

const ManageBills = () => {
  const [bills, setBills] = useState<Bill[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const router = useRouter();
  const [editBillId, setEditBillId] = useState<string | null>(null);
  const [showError, setShowError] = useState(false);
  const [selectedMonth, setSelectedMonth] = useState<number>(
    new Date().getMonth()
  );
  const [filteredBills, setFilteredBills] = useState<Bill[]>([]);
  const [isPaying, setIsPaying] = useState(false);
  const [payingBillId, setPayingBillId] = useState<string | null>(null);
  const [paymentCheckInterval, setPaymentCheckInterval] =
    useState<NodeJS.Timeout | null>(null);
  const [selectedBillId, setSelectedBillId] = useState<string | null>(null);
  const [isLoadingBills, setIsLoadingBills] = useState(false);

  interface BillType {
    value: string;
    icon: ReactNode;
  }

  const billTypeIcons: { [key: string]: BillType } = {
    Electricity: {
      value: "Electricity",
      icon: <Lightbulb className="inline-block mr-1" size={16} />,
    },
    Rent: {
      value: "Rent",
      icon: <Home className="inline-block mr-1" size={16} />,
    },
    Water: {
      value: "Water",
      icon: <Droplet className="inline-block mr-1" size={16} />,
    },
    WiFi: {
      value: "WiFi",
      icon: <Wifi className="inline-block mr-1" size={16} />,
    },
    Trash: {
      value: "Trash",
      icon: <Trash2 className="inline-block mr-1" size={16} />,
    },
  };

  const fetchBills = async () => {
    setIsLoadingBills(true);
    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        setError("No access token found. Please log in.");
        toast.error("No access token found. Please log in.");
        return;
      }

      const response = await fetch(`${API_BASE_URL}/bills/`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": `application/json`,
        },
      });

      if (!response.ok) {
        console.error("API Response Status:", response.status);
        console.error("API Response Text:", await response.text());
        throw new Error(
          `HTTP error fetching bills! status: ${response.status}`
        );
      }

      const data: Bill[] = await response.json();
      setBills(data);
      setShowError(false);
      setError(null);
    } catch (e: any) {
      setShowError(true);
      setError(`Failed to fetch data: ${e.message}`);
      toast.error(`Failed to fetch data: ${e.message}`);
    } finally {
      setIsLoadingBills(false);
    }
  };

  useEffect(() => {
    fetchBills();
  }, []);

  useEffect(() => {
    const filtered = bills.filter((bill) => {
      const billDate = parseISO(bill.due_date);
      return billDate.getMonth() === selectedMonth;
    });
    setFilteredBills(filtered);
  }, [bills, selectedMonth]);

  const handleDeleteBill = async (billId: string) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this bill?"
    );
    if (!confirmed) {
      return;
    }
    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        setError("No access token found. Please log in.");
        toast.error("No access token found. Please log in.");
        return;
      }

      const response = await fetch(`${API_BASE_URL}/bills/${billId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error deleting bill! status: ${response.status}`);
      }

      setBills(bills.filter((bill) => bill.id !== billId));
      await fetchBills();
      toast.success("Bill deleted successfully!");
    } catch (e: any) {
      setError(`Failed to delete bill: ${e.message}`);
      toast.error(`Failed to delete bill: ${e.message}`);
    }
  };

  const handleEditBill = (billId: string) => {
    setEditBillId(billId);
    setIsModalOpen(true);
  };

  const startPaymentPolling = (billId: string) => {
    const intervalId = setInterval(async () => {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        console.error("No access token found.");
        clearInterval(intervalId);
        setIsPaying(false);
        setPayingBillId(null);
        return;
      }

      try {
        const response = await fetch(`${API_BASE_URL}/bills/${billId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const billData = await response.json();
          if (billData.status === "Paid" || billData.status === "Failed") {
            clearInterval(intervalId);
            setPaymentCheckInterval(null);
            setIsPaying(false);
            setPayingBillId(null);
            setSelectedBillId(null);
            toast.success(
              `Bill ${billData.bill_type} payment ${billData.status}`
            );
            await fetchBills(); // Refresh the bill list
          }
        } else {
          console.error("Failed to fetch bill status.");
        }
      } catch (error) {
        console.error("Error during payment status check:", error);
        clearInterval(intervalId);
        setIsPaying(false);
        setPayingBillId(null);
        setSelectedBillId(null);
      }
    }, 5000); // Check every 5 seconds

    setPaymentCheckInterval(intervalId);
  };

  const handlePayBill = async (billId: string) => {
    setPayingBillId(billId);
    setIsPaying(true);
    setError(null);
    setSelectedBillId(billId);

    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        setError("No access token found. Please log in.");
        toast.error("No access token found. Please log in.");
        return;
      }

      const response = await fetch(`${API_BASE_URL}/payments/pay`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ bill_id: billId }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success("Payment initiated. Check your phone for the prompt.");
        startPaymentPolling(billId);
      } else {
        setError(`Payment failed: ${data.message || "Unknown error"}`);
        toast.error(`Payment failed: ${data.message || "Unknown error"}`);
      }
    } catch (e: any) {
      setError(`An error occurred: ${e.message}`);
      toast.error(`An error occurred: ${e.message}`);
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const handleBillStatusUpdate = useCallback(() => {
    if (editBillId) {
      fetchBills();
      setIsModalOpen(false);
      setEditBillId(null);
    }
    if (paymentCheckInterval && selectedBillId) {
      clearInterval(paymentCheckInterval);
      setPaymentCheckInterval(null);
    }
  }, [editBillId, paymentCheckInterval, selectedBillId]);

  useEffect(() => {
    handleBillStatusUpdate();
  }, [handleBillStatusUpdate]);

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      <motion.h2
        className="text-2xl font-semibold mb-4 text-gray-800"
        variants={itemVariants}
      >
        Manage Bills
      </motion.h2>

      {showError && <div className="text-red-500 mb-4">{error}</div>}
      <>
        <motion.div
          className="bg-white shadow-md rounded-md p-4 mb-4"
          variants={itemVariants}
        >
          <h3 className="text-lg font-medium mb-2 text-gray-700 flex items-center justify-between">
            <span>Add New Bill</span>
            <button
              className="bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-4 rounded flex items-center"
              onClick={() => {
                setEditBillId(null);
                setIsModalOpen(true);
              }}
            >
              <Plus className="h-4 w-4 mr-2 inline-block" />
              Add Bill
            </button>
          </h3>
          <p className="text-gray-600">
            Add a new recurring bill to your list.
          </p>
        </motion.div>

        <motion.div
          className="bg-white shadow-md rounded-md p-4 mb-4"
          variants={itemVariants}
        >
          <label
            htmlFor="month"
            className="block text-gray-700 text-sm font-bold mb-2"
          >
            Select Month:
          </label>
          <select
            id="month"
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            value={selectedMonth}
            onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
          >
            {monthNames.map((month, index) => (
              <option key={index} value={index}>
                {month}
              </option>
            ))}
          </select>
        </motion.div>

        {isLoadingBills ? (
          <div>Loading bills...</div> // Add loading indicator here
        ) : (
          <motion.div
            className="bg-white shadow-md rounded-md p-4"
            variants={itemVariants}
          >
            <h3 className="text-lg font-medium mb-2 text-gray-700">
              Your Bills for {monthNames[selectedMonth]}
            </h3>
            <div className="overflow-x-auto">
              <table className="min-w-full">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="px-4 py-2 text-left text-gray-600">Type</th>
                    <th className="px-4 py-2 text-left text-gray-600">
                      Due Date
                    </th>
                    <th className="px-4 py-2 text-left text-gray-600">
                      Amount
                    </th>
                    <th className="px-4 py-2 text-left text-gray-600">
                      Status
                    </th>
                    <th className="px-4 py-2 text-left text-gray-600">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {filteredBills.map((bill) => (
                    <tr key={bill.id} className="border-b">
                      <td className="px-4 py-2 text-gray-700">
                        {billTypeIcons[bill.bill_type]?.icon}
                        {bill.bill_type}
                      </td>
                      <td className="px-4 py-2 text-gray-700">
                        {format(parseISO(bill.due_date), "PPP")}
                      </td>
                      <td className="px-4 py-2 text-gray-700">
                        Ksh {bill.amount}
                      </td>
                      <td className="px-4 py-2 text-gray-700">
                        {isPaying && payingBillId === bill.id ? (
                          <div className="flex items-center">
                            <Clock className="animate-spin mr-2" /> Paying...
                          </div>
                        ) : (
                          bill.status
                        )}
                      </td>

                      <td className="px-4 py-2 text-gray-700">
                        <div className="flex items-center">
                          <button
                            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2 rounded mr-2 flex items-center"
                            onClick={() => handleEditBill(bill.id)}
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button
                            className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-2 rounded mr-2 flex items-center"
                            onClick={() => handleDeleteBill(bill.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                          <button
                            className={`bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-2 rounded flex items-center ${
                              isPaying && payingBillId === bill.id
                                ? "opacity-50 cursor-not-allowed"
                                : ""
                            }`}
                            onClick={() => handlePayBill(bill.id)}
                            disabled={isPaying && payingBillId === bill.id}
                          >
                            {isPaying && payingBillId === bill.id ? (
                              <ClipLoader color="#ffffff" size={16} />
                            ) : (
                              <>
                                <DollarSign className="h-4 w-4" />
                              </>
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </motion.div>
        )}
      </>
      {/* Modal */}
      <Transition appear show={isModalOpen}>
        <div className="fixed inset-0 z-10 overflow-y-auto bg-gray-500 bg-opacity-75">
          <div className="flex min-h-screen items-center justify-center p-4">
            <Transition.Child
              as={motion.div}
              initial={{ opacity: 0, scale: 0.5 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.5 }}
              transition={{ duration: 0.2 }}
              className="bg-white rounded-lg shadow-xl overflow-hidden max-w-md w-full"
            >
              <div className="p-6">
                <h2 className="text-lg font-medium text-gray-900 mb-4">
                  {editBillId ? "Edit Bill" : "Add New Bill"}
                </h2>
                <BillFormModal
                  editBillId={editBillId}
                  onClose={() => {
                    setIsModalOpen(false);
                    setEditBillId(null);
                    fetchBills();
                  }}
                  onBillUpdated={fetchBills}
                  onError={setError}
                  billTypes={Object.values(billTypeIcons)}
                />
              </div>
            </Transition.Child>
          </div>
        </div>
      </Transition>
    </motion.div>
  );
};

interface BillFormModalProps {
  editBillId: string | null;
  onClose: () => void;
  onBillUpdated: () => void;
  onError: (error: string) => void;
  billTypes: { value: string; icon: ReactNode }[];
}

const BillFormModal: React.FC<BillFormModalProps> = ({
    editBillId,
    onClose,
    onBillUpdated,
    onError,
    billTypes,
  }) => {
    const [billType, setBillType] = useState("");
    const [amount, setAmount] = useState("");
    const [paybillNumber, setPaybillNumber] = useState("");
    const [accountNumber, setAccountNumber] = useState("");
    const [dueDate, setDueDate] = useState("");
    const [isBillTypeOpen, setIsBillTypeOpen] = useState(false);
    const [accessToken, setAccessToken] = useState<string | null>(null);
    const [isLoadingToken, setIsLoadingToken] = useState(true);
    const [isEditMode, setIsEditMode] = useState(false);
    const [isRecurring, setIsRecurring] = useState(false);  // NEW STATE
  
    useEffect(() => {
      const getToken = async () => {
        if (typeof window !== "undefined" && localStorage) {
          const token = localStorage.getItem("accessToken");
          if (token) {
            setAccessToken(token);
          } else {
            console.warn("No access token found in localStorage.");
            onError("Authentication required. Please login.");
            toast.error("Authentication required. Please login.");
            return;
          }
          setIsLoadingToken(false);
  
          if (editBillId) {
            setIsEditMode(true);
            try {
              const response = await fetch(
                `${API_BASE_URL}/bills/${editBillId}`,
                {
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                  },
                }
              );
  
              if (response.ok) {
                const billData = await response.json();
                setBillType(billData.bill_type);
                setAmount(billData.amount);
                setPaybillNumber(billData.paybill_number || "");
                setAccountNumber(billData.account_number || "");
                setDueDate(billData.due_date);
              } else {
                onError("Failed to fetch bill for editing.");
                toast.error("Failed to fetch bill for editing.");
              }
            } catch (err) {
              onError("An error occurred while fetching the bill.");
              toast.error("An error occurred while fetching the bill.");
              console.error(err);
            }
          } else {
            setIsEditMode(false);
          }
        } else {
          console.warn("localStorage is not available.");
          onError(
            "localStorage is not available. Please enable cookies or use a different browser."
          );
          toast.error(
            "localStorage is not available. Please enable cookies or use a different browser."
          );
          setIsLoadingToken(false);
        }
      };
  
      getToken();
    }, [editBillId, onError, toast]);
  
      // NEW FUNCTION: CREATE RECURRING BILLS
      const createRecurringBills = async (baseBill: any, token: string) => {
        const billsToCreate = [];
        let nextDueDate = new Date(baseBill.due_date);
  
        for (let i = 1; i <= 11; i++) {  // Create for next 11 months
          nextDueDate.setMonth(nextDueDate.getMonth() + 1);
          const newBill = {
            ...baseBill,
            due_date: nextDueDate.toISOString().split('T')[0], // Format to YYYY-MM-DD
          };
          billsToCreate.push(newBill);
        }
  
        try {
          const response = await fetch(`${API_BASE_URL}/bills/`, {  // Use the SAME endpoint.  Backend handles array.
            method: 'POST', // Backend needs to accept an array of bills here!
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify(billsToCreate), // Send the array to the backend
          });
  
          const data = await response.json();
  
          if (response.ok) {
            toast.success("Bill and recurring bills added successfully!");
          } else {
            toast.error(data.message || "Failed to add recurring bills.");
          }
        } catch (err) {
          toast.error("An error occurred while adding the recurring bills.");
          console.error(err);
        }
      };
  
    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
  
      if (isLoadingToken) {
        onError("Please wait while the authentication token is loaded.");
        toast.error("Please wait while the authentication token is loaded.");
        return;
      }
  
      if (!accessToken) {
        onError("Authentication required. Please login.");
        toast.error("Authentication required. Please login.");
        return;
      }
  
      if (!billType || !amount || !paybillNumber || !accountNumber || !dueDate) {
        onError(
          "Please fill in all required fields, including Paybill and Account Numbers."
        );
        toast.error(
          "Please fill in all required fields, including Paybill and Account Numbers."
        );
        return;
      }
  
      if (!paybillNumber || !accountNumber) {
        onError("Paybill requires both Paybill Number and Account Number.");
        toast.error("Paybill requires both Paybill Number and Account Number.");
        return;
      }
  
      try {
        const url = editBillId
          ? `${API_BASE_URL}/bills/${editBillId}`
          : `${API_BASE_URL}/bills/`;
        const method = editBillId ? "PUT" : "POST";
  
        const requestBody: any = {
          bill_type: billType,
          amount: amount,
          payment_option: "paybill",
          paybill_number: paybillNumber,
          account_number: accountNumber,
          due_date: dueDate,
        };
  
        const response = await fetch(url, {
          method: method,
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          },
          body: JSON.stringify(requestBody),
        });
  
        const data = await response.json();
  
        if (response.ok) {
          toast.success(
            editBillId ? "Bill updated successfully!" : "Bill added successfully!"
          );
          onBillUpdated();
          onClose();
                  // NEW: Create recurring bills if toggled
                  if (isRecurring && !editBillId) { // Don't create recurring on edits
                    await createRecurringBills(requestBody, accessToken); // Pass the base bill
                  }
        } else {
          onError(data.message || "Failed to add bill.");
          toast.error(data.message || "Failed to add bill.");
        }
      } catch (err) {
        onError("An error occurred while adding the bill.");
        toast.error("An error occurred while adding the bill.");
        console.error(err);
      }
    };
  
    const handleCancel = () => {
      onClose();
    };
  
    return (
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            className="block text-gray-700 text-sm font-bold mb-2"
            htmlFor="billType"
          >
            Bill Type
          </label>
          <div className="relative">
            <button
              type="button"
              className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none flex items-center justify-between"
              onClick={() => setIsBillTypeOpen(!isBillTypeOpen)}
            >
              {billType || "Select Bill Type"}
              <span>▼</span>
            </button>
            {isBillTypeOpen && (
              <div className="absolute left-0 mt-1 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                <div
                  className="py-1"
                  role="menu"
                  aria-orientation="vertical"
                  aria-labelledby="options-menu"
                >
                  {billTypes.map((type) => (
                    <button
                      key={type.value}
                      className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                      role="menuitem"
                      onClick={() => {
                        setBillType(type.value);
                        setIsBillTypeOpen(false);
                      }}
                    >
                      <span className="inline-block mr-1">{type.icon}</span>
                      {type.value}
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
  
        <div>
          <label
            className="block text-gray-700 text-sm font-bold mb-2"
            htmlFor="amount"
          >
            Amount
          </label>
          <input
            className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none"
            id="amount"
            type="number"
            placeholder="Enter Amount"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
          />
        </div>
  
        <div>
          <label
            className="block text-gray-700 text-sm font-bold mb-2"
            htmlFor="paybillNumber"
          >
            Paybill Number (Business Number)
          </label>
          <input
            className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none"
            id="paybillNumber"
            type="text"
            placeholder="Enter Paybill Number"
            value={paybillNumber}
            onChange={(e) => setPaybillNumber(e.target.value)}
          />
        </div>
        <div>
          <label
            className="block text-gray-700 text-sm font-bold mb-2"
            htmlFor="accountNumber"
          >
            Account Number
          </label>
          <input
            className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none"
            id="accountNumber"
            type="text"
            placeholder="Enter Account Number"
            value={accountNumber}
            onChange={(e) => setAccountNumber(e.target.value)}
          />
        </div>
  
        <div>
          <label
            className="block text-gray-700 text-sm font-bold mb-2"
            htmlFor="dueDate"
          >
            Due Date
          </label>
          <input
            className="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-md focus:ring-2 focus:ring-teal-200 focus:border-transparent transition-all duration-200 outline-none"
            id="dueDate"
            type="date"
            value={dueDate}
            onChange={(e) => setDueDate(e.target.value)}
          />
        </div>
  
                 {/* NEW: Recurring Bill Toggle */}
                 <div className="mb-3">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        className="mr-2 h-5 w-5 text-teal-500 focus:ring-teal-300"
                        checked={isRecurring}
                        onChange={(e) => setIsRecurring(e.target.checked)}
                        disabled={isEditMode} // Disable on edit
                      />
                      <span className="text-gray-700 text-sm font-bold">
                        Create Recurring Bills (Next 11 Months)
                      </span>
                    </label>
                  </div>
  
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
            onClick={handleCancel}
          >
            Cancel
          </button>
          <button
            type="submit"
            className="bg-teal-500 hover:bg-teal-600 text-white font-bold py-2.5 px-5 rounded-md shadow-md transition-colors duration-300"
          >
            {isEditMode ? "Update Bill" : "Add Bill"}
          </button>
        </div>
      </form>
    );
  };

export default ManageBills;

================================================================================
File: ./app/layout.tsx
================================================================================
// File: ./app/layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { Toaster } from 'sonner'; // Import Toaster

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
    title: 'Billing App',
    description: 'A Next.js billing application with Flask backend.',
};

export default function RootLayout({
    children,
}: {
    children: React.ReactNode;
}) {
    return (
        <html lang="en">
            <body className={inter.className}>
                <div className="min-h-screen flex flex-col">
                    {/* Add a header/navigation here if needed */}
                    <main className="flex-grow">{children}</main>
                    <Toaster richColors /> {/* Add Toaster here */}
                    {/* Add a footer here if needed */}
                </div>
            </body>
        </html>
    );
}
================================================================================
File: ./app/page.tsx
================================================================================
// app/page.tsx
"use client";

import { useSearchParams, useRouter } from "next/navigation";
import Auth from "@/components/Auth";
import BillForm from "@/components/BillForm";
import NavBar from "@/components/NavBar";
import Dashboard from "@/components/Dashboard";
import WelcomeScreen from "@/components/WelcomeScreen";
import { useEffect, useState } from "react";
import { Clock } from "lucide-react";

export default function HomePage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const page = searchParams.get("page") || "login";
  const userId = searchParams.get("userId") || "";
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isFirstTimeUser, setIsFirstTimeUser] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const editBillId = searchParams.get("edit");
  const [checkoutRequestID, setCheckoutRequestID] =
    useState<string | null>(null);

  useEffect(() => {
    const accessToken = localStorage.getItem("accessToken");
    setIsAuthenticated(!!accessToken);

    const storedValue = localStorage.getItem("isFirstTimeUser");
    setIsFirstTimeUser(storedValue === "true");

    const checkout = searchParams.get("checkout");
    if (checkout) {
      setCheckoutRequestID(checkout);
    }

    setIsLoading(false);
  }, [searchParams]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <Clock className="animate-spin mr-2" /> Loading...
      </div>
    );
  }

  if (!isAuthenticated) {
    return <Auth initialRoute={page as "login" | "register"} />;
  }

  //Crucial: Correctly use the isFirstTimeUser value and remove item when navigating away
  if (isFirstTimeUser === true && page === "welcome") {
    return <WelcomeScreen />;
  }

  //Conditionally render navbar
  const shouldShowNavBar = !(isFirstTimeUser === true && page === "billForm");

  return (
    <div className="min-h-screen flex flex-col bg-gray-100">
      {shouldShowNavBar && <NavBar />}
      <div className="flex-1 p-6">
        {page === "billForm" ? (
          <BillForm userId={userId} editBillId={editBillId || null} />
        ) : (
          <Dashboard />
        )}
        {checkoutRequestID && (
          <div>
            <p>M-Pesa payment initiated. Check your phone for the prompt.</p>
            <p>Checkout Request ID: {checkoutRequestID}</p>
          </div>
        )}
      </div>
    </div>
  );
}
================================================================================
