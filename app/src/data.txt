File: ./components/Auth.tsx
================================================================================
// File: ./components/Auth.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import {
  Lock,
  UserPlus,
  Mail,
  Phone,
  Eye,
  EyeOff,
  ArrowRight,
} from "lucide-react";
import { toast } from "sonner";  // Import toast

const API_BASE_URL = "http://localhost:5000";

interface AuthProps {
  initialRoute: "login" | "register" | "billForm" | "dashboard" | "welcome";
}

const Auth: React.FC<AuthProps> = ({ initialRoute }) => {
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const router = useRouter();

  // components/Auth.tsx
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !password) {
      //setError("Please enter both email and password.");
      toast.error("Please enter both email and password.");
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok) {
        const accessToken = data.access_token; // Extract token
        localStorage.setItem("accessToken", accessToken);
        console.log("accessToken after login:", accessToken); // Debugging

        // Extract is_new_user from the response
        const isNewUser = data.is_new_user;
        localStorage.setItem("isFirstTimeUser", JSON.stringify(isNewUser));

        if (isNewUser) {
          router.push("/?page=welcome"); // Redirect to welcome
        } else {
          router.push("/?page=dashboard&ion=overview"); // Reload the page
        }
      } else {
        //setError(data.message || "Login failed.");
        toast.error(data.message || "Login failed.");
      }
    } catch (err) {
      //setError("An error occurred during login.");
      toast.error("An error occurred during login.");
      console.error(err);
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!fullName || !email || !phone || !password || !confirmPassword) {
      //setError("Please fill in all fields.");
      toast.error("Please fill in all fields.");
      return;
    }

    if (password !== confirmPassword) {
      //setError("Passwords do not match.");
      toast.error("Passwords do not match.");
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ full_name: fullName, email, phone, password }),
      });

      const data = await response.json();

      if (response.ok) {
        const accessToken = data.access_token; // Extract token
        localStorage.setItem("accessToken", accessToken);
        console.log("accessToken after register:", accessToken); // Debugging

        // NEW CODE HERE:  Handle is_new_user from registration
        const isNewUser = data.is_new_user;
        localStorage.setItem("isFirstTimeUser", JSON.stringify(isNewUser));
        //setSuccessMessage(data.message || "Registration successful!");
        toast.success(data.message || "Registration successful!");
        setError("");
        router.push("/?page=welcome"); // Redirect to welcome first
        // END NEW CODE
      } else {
        if (data.errors) {
          const errorMessages = Object.entries(data.errors)
            .map(([field, message]) => `${field}: ${message}`)
            .join(", ");
          //setError(`Registration failed: ${errorMessages}`);
          toast.error(`Registration failed: ${errorMessages}`);
        } else {
          //setError(data.message || "Registration failed.");
          toast.error(data.message || "Registration failed.");
        }
        setSuccessMessage("");
        console.error("Registration error:", data);
      }
    } catch (err) {
      //setError("An error occurred during registration.");
      toast.error("An error occurred during registration.");
      setSuccessMessage("");
      console.error("Registration fetch error:", err);
    }
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  const buttonVariants = {
    hover: { scale: 1.05, transition: { duration: 0.2 } },
    tap: { scale: 0.95, transition: { duration: 0.2 } },
  };

  const renderLoginForm = () => (
    <div className="min-h-screen flex items-center justify-center bg-white">
      <motion.div
        className="w-full max-w-md"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        <motion.div
          className="bg-white rounded-3xl shadow-2xl overflow-hidden"
          variants={itemVariants}
        >
          <div className="h-3 bg-gradient-to-r from-[#E91E63] to-[#9C27B0]"></div>

          <div className="px-8 pt-8 pb-10">
            <motion.div
              className="flex flex-col items-center mb-8"
              variants={itemVariants}
            >
              <div className="w-16 h-16 rounded-full flex items-center justify-center bg-gradient-to-br from-[#E91E63] to-[#9C27B0] mb-4 shadow-lg">
                <Lock className="text-white" size={30} />
              </div>
              <h2 className="text-3xl font-bold text-gray-800">Welcome Back</h2>
              <p className="text-gray-600 mt-2 text-center">
                Sign in to access your account
              </p>
            </motion.div>

            {error && (
              <motion.div
                className="mb-6 p-3 bg-red-50 border border-red-200 text-red-500 text-sm rounded-lg"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {error}
              </motion.div>
            )}

            <form onSubmit={handleLogin}>
              <motion.div className="mb-6" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="email"
                >
                  <Mail className="inline-block mr-2" size={16} />
                  Email Address
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                    id="email"
                    type="email"
                    placeholder="your.email@example.com"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
              </motion.div>

              <motion.div className="mb-8" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="password"
                >
                  <Lock className="inline-block mr-2" size={16} />
                  Password
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="••••••••••"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    onClick={togglePasswordVisibility}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-[#E91E63] focus:outline-none transition-colors duration-200"
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </motion.div>

              <motion.div
                className="flex items-center justify-between"
                variants={itemVariants}
              >
                <motion.button
                  className="w-full bg-gradient-to-r from-[#E91E63] to-[#9C27B0] text-white font-medium py-3 px-6 rounded-xl flex items-center justify-center shadow-lg shadow-purple-200/50 hover:shadow-purple-300/50 transition-all duration-300"
                  type="submit"
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                >
                  <span>Sign In</span>
                  <ArrowRight className="ml-2" size={18} />
                </motion.button>
              </motion.div>
            </form>

            <motion.div className="mt-8 text-center" variants={itemVariants}>
              <p className="text-gray-600">
                Don't have an account?{" "}
                <button
                  onClick={() => router.push("/?page=register")}
                  className="text-[#9C27B0] font-medium hover:underline focus:outline-none"
                >
                  Sign Up
                </button>
              </p>
            </motion.div>
          </div>
        </motion.div>
      </motion.div>
    </div>
  );

  const renderRegisterForm = () => (
    <div className="min-h-screen flex items-center justify-center bg-white">
      <motion.div
        className="w-full max-w-md my-8"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        <motion.div
          className="bg-white rounded-3xl shadow-2xl overflow-hidden"
          variants={itemVariants}
        >
          <div className="h-3 bg-gradient-to-r from-[#E91E63] to-[#9C27B0]"></div>

          <div className="px-8 pt-8 pb-10">
            <motion.div
              className="flex flex-col items-center mb-8"
              variants={itemVariants}
            >
              <div className="w-16 h-16 rounded-full flex items-center justify-center bg-gradient-to-br from-[#E91E63] to-[#9C27B0] mb-4 shadow-lg">
                <UserPlus className="text-white" size={30} />
              </div>
              <h2 className="text-3xl font-bold text-gray-800">
                Create Account
              </h2>
              <p className="text-gray-600 mt-2 text-center">Join us today!</p>
            </motion.div>

            {error && (
              <motion.div
                className="mb-6 p-3 bg-red-50 border border-red-200 text-red-500 text-sm rounded-lg"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {error}
              </motion.div>
            )}

            {successMessage && (
              <motion.div
                className="mb-6 p-3 bg-green-50 border border-green-200 text-green-600 text-sm rounded-lg"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {successMessage}
              </motion.div>
            )}

            <form onSubmit={handleRegister}>
              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="fullName"
                >
                  <UserPlus className="inline-block mr-2" size={16} />
                  Full Name
                </label>
                <input
                  className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                  id="fullName"
                  type="text"
                  placeholder="John Doe"
                  value={fullName}
                  onChange={(e) => setFullName(e.target.value)}
                />
              </motion.div>

              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="email"
                >
                  <Mail className="inline-block mr-2" size={16} />
                  Email Address
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                    id="email"
                    type="email"
                    placeholder="your.email@example.com"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
              </motion.div>

              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="phone"
                >
                  <Phone className="inline-block mr-2" size={16} />
                  Phone Number
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                    id="phone"
                    type="tel"
                    placeholder="+1 (555) 123-4567"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                  />
                </div>
              </motion.div>

              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="password"
                >
                  <Lock className="inline-block mr-2" size={16} />
                  Password
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="••••••••••"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    onClick={togglePasswordVisibility}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-[#E91E63] focus:outline-none transition-colors duration-200"
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </motion.div>

              <motion.div className="mb-6" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="confirmPassword"
                >
                  <Lock className="inline-block mr-2" size={16} />
                  Confirm Password
                </label>
                <div className="relative">
                  <input
                    className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                    id="confirmPassword"
                    type={showConfirmPassword ? "text" : "password"}
                    placeholder="••••••••••"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                  />
                  <button
                    type="button"
                    onClick={toggleConfirmPasswordVisibility}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-[#E91E63] focus:outline-none transition-colors duration-200"
                  >
                    {showConfirmPassword ? (
                      <EyeOff size={20} />
                    ) : (
                      <Eye size={20} />
                    )}
                  </button>
                </div>
              </motion.div>

              <motion.div
                className="flex items-center justify-between"
                variants={itemVariants}
              >
                <motion.button
                  className="w-full bg-gradient-to-r from-[#E91E63] to-[#9C27B0] text-white font-medium py-3 px-6 rounded-xl flex items-center justify-center shadow-lg shadow-purple-200/50 hover:shadow-purple-300/50 transition-all duration-300"
                  type="submit"
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                >
                  <span>Create Account</span>
                  <ArrowRight className="ml-2" size={18} />
                </motion.button>
              </motion.div>
            </form>

            <motion.div className="mt-8 text-center" variants={itemVariants}>
              <p className="text-gray-600">
                Already have an account?{" "}
                <button
                  onClick={() => router.push("/?page=login")}
                  className="text-[#9C27B0] font-medium hover:underline focus:outline-none"
                >
                  Sign In
                </button>
              </p>
            </motion.div>
          </div>
        </motion.div>
      </motion.div>
    </div>
  );

  let content;
  switch (initialRoute) {
    case "login":
      content = renderLoginForm();
      break;
    case "register":
      content = renderRegisterForm();
      break;
    default:
      content = renderLoginForm();
  }

  return content;
};

export default Auth;
================================================================================
File: ./components/WelcomeScreen.tsx
================================================================================
// File: ./components/WelcomeScreen.tsx
// app/src/components/WelcomeScreen.tsx
'use client';

import { motion } from 'framer-motion';
import { useRouter } from 'next/navigation';
import { Heart, ArrowRight } from 'lucide-react';

const WelcomeScreen = () => {
    const router = useRouter();

    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                duration: 0.5,
                when: "beforeChildren",
                staggerChildren: 0.1
            }
        },
        exit: {
            opacity: 0,
            transition: { duration: 0.3 }
        }
    };

    const itemVariants = {
        hidden: { y: 20, opacity: 0 },
        visible: {
            y: 0,
            opacity: 1,
            transition: { type: "spring", stiffness: 300, damping: 24 }
        }
    };

    const buttonVariants = {
        hover: { scale: 1.05, transition: { duration: 0.2 } },
        tap: { scale: 0.95, transition: { duration: 0.2 } }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-white">
            <motion.div
                className="w-full max-w-md"
                variants={containerVariants}
                initial="hidden"
                animate="visible"
                exit="exit"
            >
                <motion.div
                    className="bg-white rounded-3xl shadow-2xl overflow-hidden"
                    variants={itemVariants}
                >
                    <div className="h-3 bg-gradient-to-r from-[#E91E63] to-[#9C27B0]"></div>

                    <div className="px-8 pt-8 pb-10">
                        <motion.div
                            className="flex flex-col items-center mb-8"
                            variants={itemVariants}
                        >
                            <div className="w-16 h-16 rounded-full flex items-center justify-center bg-gradient-to-br from-[#E91E63] to-[#9C27B0] mb-4 shadow-lg">
                                <Heart className="text-white" size={30} />
                            </div>
                            <h2 className="text-3xl font-bold text-gray-800">Welcome to PayTrack!</h2>
                            <p className="text-gray-600 mt-2 text-center">
                                Simplify your bill payments and stay on top of your expenses.
                            </p>
                            <p className="text-gray-600 mt-2 text-center">
                                Get started now and never miss a payment again!
                            </p>
                        
                        </motion.div>

                        <motion.div className="flex items-center justify-center" variants={itemVariants}>
                            <motion.button
                                className="w-full bg-gradient-to-r from-[#E91E63] to-[#9C27B0] text-white font-medium py-3 px-6 rounded-xl flex items-center justify-center shadow-lg shadow-purple-200/50 hover:shadow-purple-300/50 transition-all duration-300"
                                variants={buttonVariants}
                                whileHover="hover"
                                whileTap="tap"
                                onClick={() => router.push('/?page=billForm')}
                            >
                                <span>Get Started</span>
                                <ArrowRight className="ml-2" size={18} />
                            </motion.button>
                        </motion.div>
                    </div>
                </motion.div>
            </motion.div>
        </div>
    );
};

export default WelcomeScreen;

================================================================================
File: ./components/BillForm.tsx
================================================================================
// File: ./components/BillForm.tsx
// app/src/components/BillForm.tsx
"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { useRouter } from "next/navigation";
import {
  Calendar,
  Wallet,
  Home,
  Lightbulb,
  Droplet,
  Wifi,
  Trash2,
  ArrowRight,
} from "lucide-react";
import { toast } from "sonner"; // Import toast from sonner

const API_BASE_URL = "http://localhost:5000";

interface BillFormProps {
  userId: string;
  editBillId?: string | null;
}

const BillForm: React.FC<BillFormProps> = ({ userId, editBillId }) => {
  const [billType, setBillType] = useState("");
  const [amount, setAmount] = useState("");
  //const [paymentOption, setPaymentOption] = useState("");  // Removed Payment Option
  const [paybillNumber, setPaybillNumber] = useState("");
  const [accountNumber, setAccountNumber] = useState("");
  const [dueDate, setDueDate] = useState("");
  const [error, setError] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [isBillTypeOpen, setIsBillTypeOpen] = useState(false);
  //const [isPaymentOptionOpen, setIsPaymentOptionOpen] = useState(false; //Removed Payment option
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [isLoadingToken, setIsLoadingToken] = useState(true);
  const router = useRouter();
  const [isEditMode, setIsEditMode] = useState(false);

  const billTypes = [
    {
      value: "Electricity",
      icon: <Lightbulb className="inline-block mr-1" size={14} />,
    },
    {
      value: "Rent",
      icon: <Home className="inline-block mr-1" size={14} />,
    },
    {
      value: "Water",
      icon: <Droplet className="inline-block mr-1" size={14} />,
    },
    { value: "WiFi", icon: <Wifi className="inline-block mr-1" size={14} /> },
    {
      value: "Trash",
      icon: <Trash2 className="inline-block mr-1" size={14} />,
    },
  ];

  //const paymentOptions = [   // Removed payment option object
  //  { value: "paybill", label: "Paybill" },
  //  //{ value: "till", label: "Till Number" }, // Removed Till option
  //];

  useEffect(() => {
    const getToken = async () => {
      if (typeof window !== "undefined" && localStorage) {
        const token = localStorage.getItem("accessToken");
        if (token) {
          setAccessToken(token);
          console.log("accessToken in BillForm:", token);
        } else {
          console.warn("No access token found in localStorage.");
          toast.error("Authentication required. Please login.");
          router.push("/?page=login"); // Redirect to login
          return;
        }
        setIsLoadingToken(false);

        if (editBillId) {
          setIsEditMode(true);
          try {
            const response = await fetch(
              `${API_BASE_URL}/bills/${editBillId}`,
              {
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${token}`,
                },
              }
            );

            if (response.ok) {
              const billData = await response.json();
              setBillType(billData.bill_type);
              setAmount(billData.amount);
              //setPaymentOption(billData.payment_option); // Removed Payment Option
              setPaybillNumber(billData.paybill_number || "");
              setAccountNumber(billData.account_number || "");
              setDueDate(billData.due_date);
            } else {
              toast.error("Failed to fetch bill for editing.");
            }
          } catch (err) {
            toast.error("An error occurred while fetching the bill.");
            console.error(err);
          }
        } else {
          setIsEditMode(false);
        }
      } else {
        console.warn("localStorage is not available.");
        toast.error("localStorage is not available. Please enable cookies or use a different browser.");
        setIsLoadingToken(false);
      }
    };

    getToken();

    const isFirstTimeUser = localStorage.getItem("isFirstTimeUser");
    if (!isFirstTimeUser && !editBillId) {
      router.push("/?page=dashboard&ion=overview");
    }
  }, [router, editBillId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (isLoadingToken) {
      toast.error("Please wait while the authentication token is loaded.");
      return;
    }

    if (!accessToken) {
      toast.error("Authentication required. Please login.");
      return;
    }

    if (!billType || !amount || !paybillNumber || !accountNumber || !dueDate) { // Removed payment option
      toast.error("Please fill in all required fields, including Paybill and Account Numbers.");
      return;
    }

      // Validate Paybill and Account Number
    if (!paybillNumber || !accountNumber) {
        toast.error("Paybill requires both Paybill Number and Account Number.");
        return;
    }


    try {
      const url = editBillId
        ? `${API_BASE_URL}/bills/${editBillId}`
        : `${API_BASE_URL}/bills/`;
      const method = editBillId ? "PUT" : "POST";

      // Construct the request body.  Only include the relevant payment details.
      const requestBody: any = {
        bill_type: billType,
        amount: amount,
        payment_option: "paybill", // Always paybill
        paybill_number: paybillNumber,
        account_number: accountNumber,
        due_date: dueDate,
      };

      const response = await fetch(url, {
        method: method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success(editBillId ? "Bill updated successfully!" : "Bill added successfully!");
        setError("");
        setBillType("");
        setAmount("");
        //setPaymentOption(""); //removed payment option
        setPaybillNumber("");
        setAccountNumber("");
        setDueDate("");

        localStorage.removeItem("isFirstTimeUser");
        router.push("/?page=dashboard&ion=manage-bills");
      } else {
        toast.error(data.message || "Failed to add bill.");
        setSuccessMessage("");
      }
    } catch (err) {
      toast.error("An error occurred while adding the bill.");
      setSuccessMessage("");
      console.error(err);
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  const buttonVariants = {
    hover: { scale: 1.05, transition: { duration: 0.2 } },
    tap: { scale: 0.95, transition: { duration: 0.2 } },
  };

  if (isLoadingToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-white">
        <div>Loading authentication token...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-white">
    {accessToken ? (
      <motion.div
        className="w-full max-w-md"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        <motion.div
          className="bg-white rounded-3xl shadow-2xl overflow-hidden"
          variants={itemVariants}
        >
          <div className="h-3 bg-gradient-to-r from-[#E91E63] to-[#9C27B0]"></div>

          <div className="px-8 pt-8 pb-10">
            <motion.div
              className="flex flex-col items-center mb-8"
              variants={itemVariants}
            >
              <div className="w-16 h-16 rounded-full flex items-center justify-center bg-gradient-to-br from-[#E91E63] to-[#9C27B0] mb-4 shadow-lg">
                <Wallet className="text-white" size={30} />
              </div>
              <h2 className="text-3xl font-bold text-gray-800">
                {isEditMode ? "Edit Bill" : "Add a Bill"}
              </h2>
              <p className="text-gray-600 mt-2 text-center italic">
                                Currently, we only support  Paybill payments.
                            </p>
              {/* Removed Here */}
            </motion.div>

            {error && (
              <motion.div
                className="mb-6 p-3 bg-red-50 border border-red-200 text-red-500 text-sm rounded-lg"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {error}
              </motion.div>
            )}

            {successMessage && (
              <motion.div
                className="mb-6 p-3 bg-green-50 border border-green-200 text-green-600 text-sm rounded-lg"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {successMessage}
              </motion.div>
            )}

            <form onSubmit={handleSubmit}>
              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="billType"
                >
                  <span className="inline-block mr-2">
                    <Home size={16} />
                  </span>
                  Bill Type
                </label>
                <div className="relative">
                  <button
                    type="button"
                    className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none flex items-center justify-between"
                    onClick={() => setIsBillTypeOpen(!isBillTypeOpen)}
                  >
                    {billType || "Select Bill Type"}
                    <span>▼</span>
                  </button>
                  {isBillTypeOpen && (
                    <div className="absolute left-0 mt-1 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
                      <div
                        className="py-1"
                        role="menu"
                        aria-orientation="vertical"
                        aria-labelledby="options-menu"
                      >
                        {billTypes.map((type) => (
                          <button
                            key={type.value}
                            className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                            role="menuitem"
                            onClick={() => {
                              setBillType(type.value);
                              setIsBillTypeOpen(false);
                            }}
                          >
                            <span className="inline-block mr-1">
                              {type.icon}
                            </span>
                            {type.value}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </motion.div>

              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="amount"
                >
                  <span className="inline-block mr-2">
                    <Wallet size={16} />
                  </span>
                  Amount
                </label>
                <input
                  className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                  id="amount"
                  type="number"
                  placeholder="Enter Amount"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                />
              </motion.div>

              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="paybillNumber"
                >
                  Paybill Number (Business Number)
                </label>
                <input
                  className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                  id="paybillNumber"
                  type="text"
                  placeholder="Enter Paybill Number"
                  value={paybillNumber}
                  onChange={(e) => setPaybillNumber(e.target.value)}
                />
              </motion.div>
              <motion.div className="mb-4" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="accountNumber"
                >
                  Account Number
                </label>
                <input
                  className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                  id="accountNumber"
                  type="text"
                  placeholder="Enter Account Number"
                  value={accountNumber}
                  onChange={(e) => setAccountNumber(e.target.value)}
                />
              </motion.div>


              <motion.div className="mb-6" variants={itemVariants}>
                <label
                  className="block text-gray-700 text-sm font-medium mb-2"
                  htmlFor="dueDate"
                >
                  <span className="inline-block mr-2">
                    <Calendar size={16} />
                  </span>
                  Due Date
                </label>
                <input
                  className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
                  id="dueDate"
                  type="date"
                  value={dueDate}
                  onChange={(e) => setDueDate(e.target.value)}
                />
              </motion.div>

              <motion.div
                className="flex items-center justify-between"
                variants={itemVariants}
              >
                <motion.button
                  className="w-full bg-gradient-to-r from-[#E91E63] to-[#9C27B0] text-white font-medium py-3 px-6 rounded-xl flex items-center justify-center shadow-lg shadow-purple-200/50 hover:shadow-purple-300/50 transition-all duration-300"
                  type="submit"
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                >
                  <span>{isEditMode ? "Update Bill" : "Add Bill"}</span>
                  <ArrowRight className="ml-2" size={18} />
                </motion.button>
              </motion.div>
            </form>
          </div>
        </motion.div>
      </motion.div>
    ) : (
      <div>Authentication required. Please login.</div>
    )}
  </div>
);
};

export default BillForm;
================================================================================
File: ./components/DashboardLayout.tsx
================================================================================
// File: ./components/DashboardLayout.tsx
// DashboardLayout.tsx
"use client";

import { useRouter, useSearchParams } from "next/navigation";
import {
    Home,
    Wallet,
    List,
    BarChart,
    Bell,
    Settings,
    LogOut,
} from "lucide-react";
import { motion } from "framer-motion";

interface DashboardLayoutProps {
    children: React.ReactNode;
}

const DashboardLayout: React.FC<DashboardLayoutProps> = ({ children }) => {
    const router = useRouter();
    const searchParams = useSearchParams();
    const activePage = searchParams.get("ion") || "overview";  // Use 'ion' here

    const navigation = [
        { name: "Overview", href: "/?page=dashboard&ion=overview", icon: Home },
        {
            name: "Manage Bills",
            href: "/?page=dashboard&ion=manage-bills",
            icon: Wallet,
        },
        {
            name: "Notifications & Reminders",
            href: "/?page=dashboard&ion=notifications",
            icon: Bell,
        },
    ];

    const handleLogout = () => {
        localStorage.removeItem("accessToken");
        localStorage.removeItem("isFirstTimeUser");
        router.push("/?page=login");
    };

    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                duration: 0.5,
                when: "beforeChildren",
                staggerChildren: 0.1,
            },
        },
        exit: {
            opacity: 0,
            transition: { duration: 0.3 },
        },
    };

    const itemVariants = {
        hidden: { y: 20, opacity: 0 },
        visible: {
            y: 0,
            opacity: 1,
            transition: { type: "spring", stiffness: 300, damping: 24 },
        },
    };

    return (
        <div className="min-h-screen flex bg-gray-50">
            {/* Sidebar */}
            <motion.aside
                className="w-64 bg-white shadow-md"
                variants={containerVariants}
                initial="hidden"
                animate="visible"
                exit="exit"
            >
                <div className="p-4">
                    <h1 className="text-2xl font-bold text-gray-800 mb-4">BillEase</h1>
                     
                    <nav>
                        {navigation.map((item) => (
                            <motion.a
                                key={item.name}
                                href={item.href}
                                className={`flex items-center py-2 px-4 rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50 ${item.name.toLowerCase().replace(/ /g, '-') === activePage ? "bg-gradient-to-r from-[#E91E63] to-[#9C27B0] text-white" : ""
                                    }`}
                                variants={itemVariants}
                                onClick={(e) => {
                                    e.preventDefault();
                                    router.push(item.href);
                                }}
                            >
                                <item.icon
                                    className="mr-2 h-5 w-5"
                                    style={{
                                        color: item.name.toLowerCase().replace(/ /g, '-') === activePage
                                            ? "white"
                                            : undefined,
                                    }}
                                />
                                {item.name}
                            </motion.a>
                        ))}
                        <motion.button
                            className="flex items-center py-2 px-4 rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-50"
                            onClick={handleLogout}
                            variants={itemVariants}
                        >
                            <LogOut className="mr-2 h-5 w-5" />
                            Logout
                        </motion.button>
                    </nav>
                </div>
            </motion.aside>

            {/* Main Content */}
            <div className="flex-1 p-4">{children}</div>
        </div>
    );
};

export default DashboardLayout;
================================================================================
File: ./components/dashboard/Notifications.tsx
================================================================================
// File: ./components/dashboard/Notifications.tsx
// app/src/components/dashboard/Notifications.tsx
'use client';

import { motion } from 'framer-motion';

const Notifications = () => {
    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                duration: 0.5,
                when: "beforeChildren",
                staggerChildren: 0.1
            }
        },
        exit: {
            opacity: 0,
            transition: { duration: 0.3 }
        }
    };

    const itemVariants = {
        hidden: { y: 20, opacity: 0 },
        visible: {
            y: 0,
            opacity: 1,
            transition: { type: "spring", stiffness: 300, damping: 24 }
        }
    };

    return (
        <motion.div variants={containerVariants} initial="hidden" animate="visible" exit="exit">
            <motion.h2 className="text-2xl font-semibold mb-4 text-gray-800" variants={itemVariants}>Notifications & Reminders</motion.h2>
              <p className="text-gray-600 mt-2 text-center">
                  *We currently only support Paybill payments.*
              </p>
            <motion.div className="bg-white shadow-md rounded-md p-4 mb-4" variants={itemVariants}>
                <h3 className="text-lg font-medium mb-2 text-gray-700">View Reminders</h3>
                <p className="text-gray-600">See upcoming email reminders...</p>
            </motion.div>
            <motion.div className="bg-white shadow-md rounded-md p-4 mb-4" variants={itemVariants}>
                <h3 className="text-lg font-medium mb-2 text-gray-700">Resend Reminder</h3>
                <p className="text-gray-600">If a user wants to get another reminder...</p>
            </motion.div>
            <motion.div className="bg-white shadow-md rounded-md p-4" variants={itemVariants}>
                <h3 className="text-lg font-medium mb-2 text-gray-700">Unpaid Bill Alerts</h3>
                <p className="text-gray-600">Notifications for overdue payments...</p>
            </motion.div>
        </motion.div>
    );
};

export default Notifications;
================================================================================
File: ./components/dashboard/Overview.tsx
================================================================================
// File: ./components/dashboard/Overview.tsx
// app/src/components/dashboard/Overview.tsx
'use client';

import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';
import { format, isWithinInterval, parseISO } from 'date-fns'; // Import date-fns functions
import { toast } from 'sonner'; // Import toast
import { Clock, CheckCircle, AlertTriangle, Wallet, Calendar, LucideIcon } from 'lucide-react'; // Import icons

const API_BASE_URL = "http://localhost:5000";

interface Bill {
    id: string;
    bill_type: string;
    amount: number;
    due_date: string;
    status: string;
}

interface Transaction {
    id: string;
    bill_id: string;
    user_id: string;
    amount_paid: number;
    payment_reference: string;
    status: string;
    paid_at: string; // Updated to string to match backend DateTime
    bill?: Bill; // Add bill property to Transaction Interface
}

const Overview = () => {
    const [upcomingBills, setUpcomingBills] = useState<Bill[]>([]);
    const [totalDue, setTotalDue] = useState(0);
    const [recentTransactions, setRecentTransactions] = useState<Transaction[]>([]);
    const [accessToken, setAccessToken] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [paymentStatus, setPaymentStatus] = useState<string | null>(null);  // New state
    const [paymentTimeoutId, setPaymentTimeoutId] = useState<NodeJS.Timeout | null>(null); // Timeout ID

    const [billDetails, setBillDetails] = useState<{ [billId: string]: Bill }>({}); // State to hold bill details

    // Define a type for payment status icons
    type PaymentStatusIcons = {
        [key: string]: {
            icon: LucideIcon;
            color: string;
        };
    };

    // Payment Status Icons
    const paymentStatusIcons: PaymentStatusIcons = {
        Completed: { icon: CheckCircle, color: 'text-green-500' },
        Pending: { icon: Clock, color: 'text-yellow-500' },
        Failed: { icon: AlertTriangle, color: 'text-red-500' },
    };

    useEffect(() => {
        const fetchBills = async () => {
            setIsLoading(true);
            setError(null);
            try {
                // Retrieve access token from localStorage
                const token = localStorage.getItem('accessToken');
                if (!token) {
                    setError('No access token found. Please log in.');
                    toast.error('No access token found. Please log in.');
                    return;
                }
                setAccessToken(token);

                // Fetch Bills
                const billsResponse = await fetch(`${API_BASE_URL}/bills/`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                    },
                });

                if (!billsResponse.ok) {
                    throw new Error(`HTTP error fetching bills! status: ${billsResponse.status}`);
                }

                const billsData = await billsResponse.json();

                // Filter bills due in the next 10 days
                const today = new Date();
                const tenDaysFromNow = new Date();
                tenDaysFromNow.setDate(today.getDate() + 10);

                const upcoming = billsData.filter((bill: Bill) => {
                    const dueDate = parseISO(bill.due_date); // Parse the due date string to a Date object
                    return isWithinInterval(dueDate, { start: today, end: tenDaysFromNow });
                });

                setUpcomingBills(upcoming);

                // Calculate total due amount from the filtered bills
                const total = upcoming.reduce((sum: number, bill: Bill) => {
                    if (bill.status === 'Pending') {
                        return sum + bill.amount;
                    }
                    return sum;
                }, 0);
                setTotalDue(total);

                // Fetch Recent Transactions with Bill details
                const transactionsResponse = await fetch(`${API_BASE_URL}/payments/history`, { // Updated endpoint
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                        
                    },
                });

                if (!transactionsResponse.ok) {
                    console.warn("Failed to fetch transactions.");
                    setRecentTransactions([]);
                    toast.error("Failed to fetch transactions.");
                } else {
                    let transactionsData: Transaction[] = await transactionsResponse.json();
                    setRecentTransactions(transactionsData);

                     // Create a map of bill details for easy access
                     const billMap: { [billId: string]: Bill } = {};
                     transactionsData.forEach(transaction => {
                         if (transaction.bill) {
                             billMap[transaction.bill.id] = transaction.bill;
                         }
                     });
                     setBillDetails(billMap);

                }

            } catch (e: any) {
                setError(`Failed to fetch data: ${e.message}`);
                console.error("Error fetching data:", e);
                setRecentTransactions([]);
                toast.error(`Failed to fetch data: ${e.message}`);
            } finally {
                setIsLoading(false);
            }
        };

        fetchBills();
    }, []);

    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                duration: 0.5,
                when: "beforeChildren",
                staggerChildren: 0.1
            }
        },
        exit: {
            opacity: 0,
            transition: { duration: 0.3 }
        }
    };

    const itemVariants = {
        hidden: { y: 20, opacity: 0 },
        visible: {
            y: 0,
            opacity: 1,
            transition: { type: "spring", stiffness: 300, damping: 24 }
        }
    };

    return (
        <motion.div variants={containerVariants} initial="hidden" animate="visible" exit="exit">
            <motion.h2 className="text-2xl font-semibold mb-4 text-gray-800" variants={itemVariants}>Overview</motion.h2>
           

            {isLoading ? (
                <div className="flex items-center justify-center">
                    <Clock className="animate-spin mr-2" /> Loading data...
                </div>
            ) : null}

            {error && <div className="text-red-500 mb-4">Error: {error}</div>}

            <motion.div className="bg-white shadow-md rounded-md p-4 mb-4" variants={itemVariants}>
                <h3 className="text-lg font-medium mb-2 text-gray-700 flex items-center"><Calendar className="mr-2" /> Upcoming Bills</h3>
                {upcomingBills.length > 0 ? (
                    <div className="overflow-x-auto">
                        <table className="min-w-full">
                            <thead>
                                <tr className="bg-gray-100">
                                    <th className="px-4 py-2 text-left text-gray-600">Type</th>
                                    <th className="px-4 py-2 text-left text-gray-600">Due Date</th>
                                    <th className="px-4 py-2 text-left text-gray-600">Amount</th>
                                    <th className="px-4 py-2 text-left text-gray-600">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                {upcomingBills.map(bill => (
                                    <tr key={bill.id} className="border-b">
                                        <td className="px-4 py-2 text-gray-700">{bill.bill_type}</td>
                                        <td className="px-4 py-2 text-gray-700">{format(parseISO(bill.due_date), 'PPP')}</td>
                                        <td className="px-4 py-2 text-gray-700">Ksh {bill.amount}</td>
                                        <td className="px-4 py-2 text-gray-700">{bill.status}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                ) : (
                    <p className="text-gray-600">No upcoming bills in the next 10 days.</p>
                )}
            </motion.div>

            <motion.div className="bg-white shadow-md rounded-md p-4 mb-4" variants={itemVariants}>
                <h3 className="text-lg font-medium mb-2 text-gray-700 flex items-center"> <Wallet className="mr-2" /> Total Due Amount</h3>
                <p className="text-gray-600 font-semibold text-xl">
                    {totalDue > 0 ? `Ksh ${totalDue}` : 'No bills due in the next 10 days.'}
                </p>
            </motion.div>

            <motion.div className="bg-white shadow-md rounded-md p-4 mb-4" variants={itemVariants}>
                <h3 className="text-lg font-medium mb-2 text-gray-700 flex items-center"><Clock className="mr-2" /> Recent Transactions</h3>
                {recentTransactions.length > 0 ? (
                    <div className="overflow-x-auto">
                        <table className="min-w-full">
                            <thead>
                                <tr className="bg-gray-100">
                                    <th className="px-4 py-2 text-left text-gray-600">Bill Type</th>
                                    <th className="px-4 py-2 text-left text-gray-600">Date</th>
                                    <th className="px-4 py-2 text-left text-gray-600">Amount</th>
                                    <th className="px-4 py-2 text-left text-gray-600">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                {recentTransactions.map(transaction => {
                                    const formattedDate = format(new Date(transaction.paid_at), 'PPP p');
                                    //const billType = billDetails[transaction.bill_id]?.bill_type || 'Unknown Bill Type';
                                    const billType = transaction.bill?.bill_type || 'Unknown Bill Type';
                                    const statusInfo = paymentStatusIcons[transaction.status] || { icon: AlertTriangle, color: 'text-gray-500' };
                                    const StatusIcon = statusInfo.icon;

                                    return (
                                        <tr key={transaction.id} className="border-b">
                                            <td className="px-4 py-2 text-gray-700">{billType}</td>
                                            <td className="px-4 py-2 text-gray-700">{formattedDate}</td>
                                            <td className="px-4 py-2 text-gray-700">Ksh {transaction.amount_paid}</td>
                                            <td className="px-4 py-2 text-gray-700">
                                                <div className="flex items-center">
                                                    <StatusIcon className={`mr-1 w-4 h-4 ${statusInfo.color}`} />
                                                    {transaction.status}
                                                </div>
                                            </td>
                                        </tr>
                                    );
                                })}
                            </tbody>
                        </table>
                    </div>
                ) : (
                    <p className="text-gray-600">No recent transactions.</p>
                )}
            </motion.div>

            <motion.div className="bg-white shadow-md rounded-md p-4" variants={itemVariants}>
                <h3 className="text-lg font-medium mb-2 text-gray-700">Payment Reminder Status</h3>
                <p className="text-gray-600">See if reminders have been sent...</p>
            </motion.div>
        </motion.div>
    );
};

export default Overview;
================================================================================
File: ./components/dashboard/ManageBills.tsx
================================================================================
// ManageBills.tsx
"use client";

import { motion } from "framer-motion";
import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import {
  Edit,
  Trash2,
  DollarSign,
  Plus,
  Lightbulb,
  Home,
  Droplet,
  Wifi,
  Calendar,
  AlertTriangle,
  Clock,
} from "lucide-react"; // Added Plus icon, icon here
import { Transition } from "@headlessui/react";
import { format, parseISO } from "date-fns";
import { toast } from "sonner"; // Import toast
import { ClipLoader } from "react-spinners"; // Import ClipLoader

const API_BASE_URL = "http://localhost:5000";

interface Bill {
  id: string;
  bill_type: string;
  amount: number;
  due_date: string;
  status: string;
  payment_option: string;
  paybill_number: string | null;
  till_number: string | null;
  account_number: string | null;
}

const ManageBills = () => {
  const [bills, setBills] = useState<Bill[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false); // Modal state
  const router = useRouter();
  const [editBillId, setEditBillId] = useState<string | null>(null); // State for edit mode
  const [showError, setShowError] = useState(false);
  const [selectedMonth, setSelectedMonth] = useState<number>(
    new Date().getMonth()
  ); // Current month, 0-indexed
  const [filteredBills, setFilteredBills] = useState<Bill[]>([]);
  const [isPaying, setIsPaying] = useState(false); // Payment loading state
  const [payingBillId, setPayingBillId] = useState<string | null>(null); // Track the bill being paid
  const [paymentCheckInterval, setPaymentCheckInterval] =
    useState<NodeJS.Timeout | null>(null); // Interval ID
  const [selectedBillId, setSelectedBillId] = useState<string | null>(null); //Add a new state

  interface BillType {
    value: string;
    icon: React.ReactNode; // Use React.ReactNode for JSX elements
  }

  const billTypes: BillType[] = [
    {
      value: "Electricity",
      icon: <Lightbulb className="inline-block mr-1" size={14} />,
    },
    {
      value: "Rent",
      icon: <Home className="inline-block mr-1" size={14} />,
    },
    {
      value: "Water",
      icon: <Droplet className="inline-block mr-1" size={14} />,
    },
    { value: "WiFi", icon: <Wifi className="inline-block mr-1" size={14} /> },
    {
      value: "Trash",
      icon: <Trash2 className="inline-block mr-1" size={14} />,
    },
  ];

  // Function to fetch bills
  const fetchBills = async () => {
    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        setError("No access token found. Please log in.");
        toast.error("No access token found. Please log in.");
        return;
      }

      const response = await fetch(`${API_BASE_URL}/bills/`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": `application/json`,
        },
      });

      if (!response.ok) {
        console.error("API Response Status:", response.status);
        console.error("API Response Text:", await response.text());
        throw new Error(
          `HTTP error fetching bills! status: ${response.status}`
        );
      }

      const data: Bill[] = await response.json();
      setBills(data);
      console.log("Bills data:", data);
      setShowError(false);
      setError(null);
    } catch (e: any) {
      setShowError(true);
      setError(`Failed to fetch data: ${e.message}`);
      console.error("Fetch error:", e);
      toast.error(`Failed to fetch data: ${e.message}`);
    }
  };

  useEffect(() => {
    fetchBills();
  }, []);

  // Update filteredBills whenever bills or selectedMonth changes
  useEffect(() => {
    const filtered = bills.filter((bill) => {
      const billDate = parseISO(bill.due_date);
      return billDate.getMonth() === selectedMonth;
    });
    setFilteredBills(filtered);
  }, [bills, selectedMonth]);

  const handleDeleteBill = async (billId: string) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this bill?"
    );
    if (!confirmed) {
      return;
    }
    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        setError("No access token found. Please log in.");
        toast.error("No access token found. Please log in.");
        return;
      }

      const response = await fetch(`${API_BASE_URL}/bills/${billId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error deleting bill! status: ${response.status}`);
      }

      setBills(bills.filter((bill) => bill.id !== billId));
      await fetchBills(); // Refresh bills after deletion
      toast.success("Bill deleted successfully!");
    } catch (e: any) {
      setError(`Failed to delete bill: ${e.message}`);
      toast.error(`Failed to delete bill: ${e.message}`);
    }
  };

  const handleEditBill = (billId: string) => {
    setEditBillId(billId);
    setIsModalOpen(true);
  };

  // Functions for handling payments
  const handlePayBill = async (billId: string) => {
    setPayingBillId(billId); // Set the ID of the bill being paid
    setIsPaying(true); // Start loading
    setError(null); // Clear any previous errors
    setSelectedBillId(billId);

    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        setError("No access token found. Please log in.");
        toast.error("No access token found. Please log in.");
        return;
      }

      const response = await fetch(`${API_BASE_URL}/payments/pay`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ bill_id: billId }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success("Payment initiated. Check your phone for the prompt.");

        // Set up polling to check the payment status
        const intervalId = setInterval(async () => {
          await fetchBills(); // Refetch bills
        }, 5000); // Check every 5 seconds
        setPaymentCheckInterval(intervalId); // Store the interval ID
      } else {
        setError(`Payment failed: ${data.message || "Unknown error"}`);
        toast.error(`Payment failed: ${data.message || "Unknown error"}`);
      }
    } catch (e: any) {
      setError(`An error occurred: ${e.message}`);
      toast.error(`An error occurred: ${e.message}`);
    } finally {
      //setIsPaying(false); // Ensure loading is stopped even on error //DONT STOP LOADING ON FINALLY
      //setPayingBillId(null);
      if (!error) {
        //Only clear if there isnt an error, we want spinner to go on
        if (payingBillId === billId) {
          // After a certain time, stop checking and clear the loading state (even if there's no definitive answer)
          setTimeout(() => {
            if (paymentCheckInterval) {
              clearInterval(paymentCheckInterval);
              setPaymentCheckInterval(null);
            }
            setIsPaying(false); // Ensure loading is stopped even on error
            setPayingBillId(null);
            setSelectedBillId(null); //Clear selected bill ID
          }, 60000); // After 60 seconds, stop checking
        }
      }
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    exit: {
      opacity: 0,
      transition: { duration: 0.3 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: "spring", stiffness: 300, damping: 24 },
    },
  };

  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const handleBillStatusUpdate = useCallback(() => {
    if (editBillId) {
      fetchBills();
      setIsModalOpen(false);
      setEditBillId(null);
    }
    if (paymentCheckInterval && selectedBillId) {
      //Added this selectedBillId to only update one element at a time.
      clearInterval(paymentCheckInterval);
      setPaymentCheckInterval(null);
    }
  }, [editBillId, paymentCheckInterval, selectedBillId]);

  useEffect(() => {
    handleBillStatusUpdate();
  }, [handleBillStatusUpdate]);

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      <motion.h2
        className="text-2xl font-semibold mb-4 text-gray-800"
        variants={itemVariants}
      >
        Manage Bills
      </motion.h2>
      {/* Remove it here  */}

      {showError && <div className="text-red-500 mb-4">{error}</div>}
      <>
        <motion.div
          className="bg-white shadow-md rounded-md p-4 mb-4"
          variants={itemVariants}
        >
          <h3 className="text-lg font-medium mb-2 text-gray-700 flex items-center justify-between">
            <span>Add New Bill</span>
            <button
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded flex items-center"
              onClick={() => {
                setEditBillId(null); // Reset editBillId when adding a new bill
                setIsModalOpen(true);
              }}
            >
              <Plus className="h-4 w-4 mr-2 inline-block" />
              Add Bill
            </button>
          </h3>
          <p className="text-gray-600">
            Add a new recurring bill to your list.
          </p>
        </motion.div>

        <motion.div
          className="bg-white shadow-md rounded-md p-4 mb-4"
          variants={itemVariants}
        >
          <label
            htmlFor="month"
            className="block text-gray-700 text-sm font-bold mb-2"
          >
            Select Month:
          </label>
          <select
            id="month"
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            value={selectedMonth}
            onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
          >
            {monthNames.map((month, index) => (
              <option key={index} value={index}>
                {month}
              </option>
            ))}
          </select>
        </motion.div>

        {filteredBills.length > 0 ? (
          <motion.div
            className="bg-white shadow-md rounded-md p-4"
            variants={itemVariants}
          >
            <h3 className="text-lg font-medium mb-2 text-gray-700">
              Your Bills for {monthNames[selectedMonth]}
            </h3>
            <div className="overflow-x-auto">
              <table className="min-w-full">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="px-4 py-2 text-left text-gray-600">Type</th>
                    <th className="px-4 py-2 text-left text-gray-600">
                      Due Date
                    </th>
                    <th className="px-4 py-2 text-left text-gray-600">
                      Amount
                    </th>
                    <th className="px-4 py-2 text-left text-gray-600">
                      Status
                    </th>
                    <th className="px-4 py-2 text-left text-gray-600">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {filteredBills.map((bill) => (
                    <tr key={bill.id} className="border-b">
                      <td className="px-4 py-2 text-gray-700">
                        {bill.bill_type}
                      </td>
                      <td className="px-4 py-2 text-gray-700">
                        {format(parseISO(bill.due_date), "PPP")}
                      </td>
                      <td className="px-4 py-2 text-gray-700">
                        Ksh {bill.amount}
                      </td>
                      <td className="px-4 py-2 text-gray-700">
                        {isPaying && payingBillId === bill.id ? (
                          <div className="flex items-center">
                            <Clock className="animate-spin mr-2" /> Paying...
                          </div>
                        ) : (
                          bill.status
                        )}
                      </td>

                      <td className="px-4 py-2 text-gray-700">
                        <div className="flex items-center">
                          <button
                            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2 rounded mr-2 flex items-center"
                            onClick={() => handleEditBill(bill.id)}
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          <button
                            className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-2 rounded mr-2 flex items-center"
                            onClick={() => handleDeleteBill(bill.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                          <button
                            className={`bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-2 rounded flex items-center ${
                              isPaying && payingBillId === bill.id
                                ? "opacity-50 cursor-not-allowed"
                                : ""
                            }`}
                            onClick={() => handlePayBill(bill.id)}
                            disabled={isPaying && payingBillId === bill.id}
                          >
                            {isPaying && payingBillId === bill.id ? (
                              <ClipLoader color="#ffffff" size={16} />
                            ) : (
                              <>
                                <DollarSign className="h-4 w-4" />{" "}
                              </>
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </motion.div>
        ) : (
          <motion.div
            className="bg-white shadow-md rounded-md p-4"
            variants={itemVariants}
          >
            <p className="text-gray-600">
              No bills found for {monthNames[selectedMonth]}.
            </p>
          </motion.div>
        )}
      </>
      {/* Modal */}
      <Transition appear show={isModalOpen} as="div">
        <div className="fixed inset-0 z-10 overflow-y-auto bg-gray-500 bg-opacity-75">
          <div className="flex min-h-screen items-center justify-center p-4">
            <Transition.Child
              as={motion.div}
              initial={{ opacity: 0, scale: 0.5 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.5 }}
              transition={{ duration: 0.2 }}
              className="bg-white rounded-lg shadow-xl overflow-hidden max-w-md w-full"
            >
              <div className="p-6">
                <h2 className="text-lg font-medium text-gray-900 mb-4">
                  {editBillId ? "Edit Bill" : "Add New Bill"}
                </h2>
                <BillFormModal
                  editBillId={editBillId}
                  onClose={() => {
                    setIsModalOpen(false);
                    setEditBillId(null);
                    fetchBills(); // Refresh bills after closing modal
                  }}
                  onBillUpdated={fetchBills} // Callback to refresh bills after update
                  onError={setError}
                  billTypes={billTypes}
                />
              </div>
            </Transition.Child>
          </div>
        </div>
      </Transition>
    </motion.div>
  );
};

// BillFormModal Component (Simplified)
interface BillFormModalProps {
  editBillId: string | null;
  onClose: () => void;
  onBillUpdated: () => void; // Callback to refresh bills
  onError: (error: string) => void;
  billTypes: { value: string; icon: React.ReactNode }[];
}

const BillFormModal: React.FC<BillFormModalProps> = ({
  editBillId,
  onClose,
  onBillUpdated,
  onError,
  billTypes,
}) => {
  const [billType, setBillType] = useState("");
  const [amount, setAmount] = useState("");
  //const [paymentOption, setPaymentOption] = useState(""); //removed payment option
  const [paybillNumber, setPaybillNumber] = useState("");
  const [accountNumber, setAccountNumber] = useState("");
  const [dueDate, setDueDate] = useState("");
  const [isBillTypeOpen, setIsBillTypeOpen] = useState(false);
  //const [isPaymentOptionOpen, setIsPaymentOptionOpen] = useState(false); //removed payment option
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [isLoadingToken, setIsLoadingToken] = useState(true);
  const [isEditMode, setIsEditMode] = useState(false);

  //const paymentOptions = [
  //    { value: "paybill", label: "Paybill" },
  //    //{ value: "till", label: "Till Number" }, // Removed till option
  //];

  useEffect(() => {
    const getToken = async () => {
      if (typeof window !== "undefined" && localStorage) {
        const token = localStorage.getItem("accessToken");
        if (token) {
          setAccessToken(token);
          console.log("accessToken in BillForm:", token);
        } else {
          console.warn("No access token found in localStorage.");
          onError("Authentication required. Please login.");
          toast.error("Authentication required. Please login.");
          // router.push("/?page=login"); // Redirect to login
          return;
        }
        setIsLoadingToken(false);

        if (editBillId) {
          setIsEditMode(true);
          try {
            const response = await fetch(
              `${API_BASE_URL}/bills/${editBillId}`,
              {
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${token}`,
                },
              }
            );

            if (response.ok) {
              const billData = await response.json();
              setBillType(billData.bill_type);
              setAmount(billData.amount);
              //setPaymentOption(billData.payment_option); // Removed payment option
              setPaybillNumber(billData.paybill_number || "");
              setAccountNumber(billData.account_number || "");
              setDueDate(billData.due_date);
            } else {
              onError("Failed to fetch bill for editing.");
              toast.error("Failed to fetch bill for editing.");
            }
          } catch (err) {
            onError("An error occurred while fetching the bill.");
            toast.error("An error occurred while fetching the bill.");
            console.error(err);
          }
        } else {
          setIsEditMode(false);
        }
      } else {
        console.warn("localStorage is not available.");
        onError(
          "localStorage is not available. Please enable cookies or use a different browser."
        );
        toast.error(
          "localStorage is not available. Please enable cookies or use a different browser."
        );
        setIsLoadingToken(false);
      }
    };

    getToken();
  }, [editBillId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (isLoadingToken) {
      onError("Please wait while the authentication token is loaded.");
      toast.error("Please wait while the authentication token is loaded.");
      return;
    }

    if (!accessToken) {
      onError("Authentication required. Please login.");
      toast.error("Authentication required. Please login.");
      return;
    }

    if (!billType || !amount || !paybillNumber || !accountNumber || !dueDate) {
      onError(
        "Please fill in all required fields, including Paybill and Account Numbers."
      );
      toast.error(
        "Please fill in all required fields, including Paybill and Account Numbers."
      );
      return;
    }

    // Validate Paybill and Account Number
    if (!paybillNumber || !accountNumber) {
      onError("Paybill requires both Paybill Number and Account Number.");
      toast.error("Paybill requires both Paybill Number and Account Number.");
      return;
    }

    try {
      const url = editBillId
        ? `${API_BASE_URL}/bills/${editBillId}`
        : `${API_BASE_URL}/bills/`;
      const method = editBillId ? "PUT" : "POST";

      // Construct the request body.  Only include the relevant payment details.
      const requestBody: any = {
        bill_type: billType,
        amount: amount,
        payment_option: "paybill", // Always paybill
        paybill_number: paybillNumber,
        account_number: accountNumber,
        due_date: dueDate,
      };

      const response = await fetch(url, {
        method: method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success(
          editBillId ? "Bill updated successfully!" : "Bill added successfully!"
        );
        onBillUpdated(); // Notify parent component to refresh bills
        onClose();
      } else {
        onError(data.message || "Failed to add bill.");
        toast.error(data.message || "Failed to add bill.");
      }
    } catch (err) {
      onError("An error occurred while adding the bill.");
      toast.error("An error occurred while adding the bill.");
      console.error(err);
    }
  };

  const handleCancel = () => {
    onClose(); // Close the modal
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {/* Bill Type */}
      <div>
        <label
          className="block text-gray-700 text-sm font-bold mb-2"
          htmlFor="billType"
        >
          Bill Type
        </label>
        <div className="relative">
          <button
            type="button"
            className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none flex items-center justify-between"
            onClick={() => setIsBillTypeOpen(!isBillTypeOpen)}
          >
            {billType || "Select Bill Type"}
            <span>▼</span>
          </button>
          {isBillTypeOpen && (
            <div className="absolute left-0 mt-1 w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10">
              <div
                className="py-1"
                role="menu"
                aria-orientation="vertical"
                aria-labelledby="options-menu"
              >
                {billTypes.map((type) => (
                  <button
                    key={type.value}
                    className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                    role="menuitem"
                    onClick={() => {
                      setBillType(type.value);
                      setIsBillTypeOpen(false);
                    }}
                  >
                    <span className="inline-block mr-1">{type.icon}</span>
                    {type.value}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Amount */}
      <div>
        <label
          className="block text-gray-700 text-sm font-bold mb-2"
          htmlFor="amount"
        >
          Amount
        </label>
        <input
          className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
          id="amount"
          type="number"
          placeholder="Enter Amount"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
        />
      </div>

      {/* Paybill Fields */}
      <div>
        <label
          className="block text-gray-700 text-sm font-bold mb-2"
          htmlFor="paybillNumber"
        >
          Paybill Number (Business Number)
        </label>
        <input
          className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
          id="paybillNumber"
          type="text"
          placeholder="Enter Paybill Number"
          value={paybillNumber}
          onChange={(e) => setPaybillNumber(e.target.value)}
        />
      </div>
      <div>
        <label
          className="block text-gray-700 text-sm font-bold mb-2"
          htmlFor="accountNumber"
        >
          Account Number
        </label>
        <input
          className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
          id="accountNumber"
          type="text"
          placeholder="Enter Account Number"
          value={accountNumber}
          onChange={(e) => setAccountNumber(e.target.value)}
        />
      </div>

      {/* Due Date */}
      <div>
        <label
          className="block text-gray-700 text-sm font-bold mb-2"
          htmlFor="dueDate"
        >
          Due Date
        </label>
        <input
          className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#9C27B0] focus:border-transparent transition-all duration-200 outline-none"
          id="dueDate"
          type="date"
          value={dueDate}
          onChange={(e) => setDueDate(e.target.value)}
        />
      </div>

      {/* Submit & Cancel Buttons */}
      <div className="flex justify-end space-x-4">
        <button
          type="button"
          className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
          onClick={handleCancel}
        >
          Cancel
        </button>
        <button
          type="submit"
          className="bg-gradient-to-r from-[#E91E63] to-[#9C27B0] text-white font-bold py-3 px-6 rounded-xl flex items-center justify-center shadow-lg shadow-purple-200/50 hover:shadow-purple-300/50 transition-all duration-300"
        >
          {isEditMode ? "Update Bill" : "Add Bill"}
        </button>
      </div>
    </form>
  );
};

export default ManageBills;

================================================================================
File: ./app/layout.tsx
================================================================================
// File: ./app/layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { Toaster } from 'sonner'; // Import Toaster

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
    title: 'Billing App',
    description: 'A Next.js billing application with Flask backend.',
};

export default function RootLayout({
    children,
}: {
    children: React.ReactNode;
}) {
    return (
        <html lang="en">
            <body className={inter.className}>
                <div className="min-h-screen flex flex-col">
                    {/* Add a header/navigation here if needed */}
                    <main className="flex-grow">{children}</main>
                    <Toaster richColors /> {/* Add Toaster here */}
                    {/* Add a footer here if needed */}
                </div>
            </body>
        </html>
    );
}
================================================================================
File: ./app/page.tsx
================================================================================
// File: ./app/page.tsx
// app/page.tsx
'use client';

import { useSearchParams, useRouter } from 'next/navigation';
import Auth from '@/components/Auth';
import BillForm from '@/components/BillForm';
import DashboardLayout from '@/components/DashboardLayout';
import Overview from '@/components/dashboard/Overview';
import ManageBills from '@/components/dashboard/ManageBills';
import Notifications from '@/components/dashboard/Notifications';
import WelcomeScreen from '@/components/WelcomeScreen';
import { useEffect, useState } from "react";
import { Clock } from 'lucide-react'; // Import Clock icon


export default function HomePage() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const page = searchParams.get('page') || 'login';
    const userId = searchParams.get('userId') || '';
    const dashboardSection = searchParams.get('ion') || 'overview'; // Corrected name
    const [isFirstTimeUser, setIsFirstTimeUser] = useState<boolean | null>(null);
    const [isLoading, setIsLoading] = useState(true); // Add a loading state
    const editBillId = searchParams.get('edit');
    const [checkoutRequestID, setCheckoutRequestID] = useState<string | null>(null);

    useEffect(() => {
        if (typeof window !== 'undefined') {
            const storedValue = localStorage.getItem('isFirstTimeUser');
            setIsFirstTimeUser(storedValue === 'true');
            // Get checkout request id from the URL if present
            const checkout = searchParams.get('checkout');
            if (checkout) {
                setCheckoutRequestID(checkout);
            }
        }
        setIsLoading(false); // Set loading to false after attempting to retrieve the value
    }, [searchParams]);

    const renderDashboardSection = () => {
        switch (dashboardSection) {
            case 'overview':
                return <Overview />;
            case 'manage-bills':
                return <ManageBills />;
            case 'notifications':
                return <Notifications />;
            default:
                return <Overview />;
        }
    };

    if (isLoading) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                <Clock className="animate-spin mr-2" /> Loading...
            </div>
        ); // Show a loading indicator while checking localStorage
    }

    if (page === 'dashboard') {
        return (
            <DashboardLayout key={dashboardSection}> {/* Key Prop Here! */}
                {renderDashboardSection()}
                {checkoutRequestID && (
                    <div>
                        <p>M-Pesa payment initiated. Check your phone for the prompt.</p>
                        <p>Checkout Request ID: {checkoutRequestID}</p>
                        {/* You might want to add a button to check the payment status later */}
                    </div>
                )}
            </DashboardLayout>
        );
    } else if (page === 'billForm') {
        return <BillForm userId={userId} editBillId={editBillId || null} />;
    } else if (page === 'welcome') {
        return <WelcomeScreen />;
    } else {
        return <Auth initialRoute={page as 'login' | 'register' | 'billForm' | 'dashboard' | 'welcome'} />;
    }
}
================================================================================
