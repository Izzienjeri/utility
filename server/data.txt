
========================================
models.py
========================================

# server/models.py

import uuid
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_marshmallow import Marshmallow
from datetime import datetime
from marshmallow import fields, validate


db = SQLAlchemy()
bcrypt = Bcrypt()
ma = Marshmallow()


def generate_uuid():
    """Generate a UUID for primary keys"""
    return str(uuid.uuid4())


class User(db.Model):
    __tablename__ = "users"

    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)
    full_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    phone = db.Column(db.String(15), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def __init__(self, full_name, email, phone, password):
        self.id = generate_uuid()
        self.full_name = full_name
        self.email = email
        self.phone = phone
        self.password_hash = bcrypt.generate_password_hash(password).decode("utf-8")

    def check_password(self, password):
        return bcrypt.check_password_hash(self.password_hash, password)


class Bill(db.Model):
    __tablename__ = "bills"

    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)
    user_id = db.Column(db.String(36), db.ForeignKey("users.id"), nullable=False)
    bill_type = db.Column(db.String(50), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    payment_option = db.Column(db.String(50), nullable=False)  # 'paybill' or 'till'
    till_number = db.Column(db.String(50), nullable=True)  # Till Number
    account_number = db.Column(db.String(50), nullable=True)  # Account Number (for Paybill)
    due_date = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(20), default="Pending")
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    user = db.relationship("User", backref="bills")



class Payment(db.Model):
    __tablename__ = "payments"

    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)
    bill_id = db.Column(db.String(36), db.ForeignKey("bills.id"), nullable=False)
    user_id = db.Column(db.String(36), db.ForeignKey("users.id"), nullable=False)
    amount_paid = db.Column(db.Float, nullable=False)
    payment_reference = db.Column(db.String(100), unique=True, nullable=False)
    status = db.Column(db.String(20), default="Completed")
    paid_at = db.Column(db.DateTime, default=datetime.utcnow)

    bill = db.relationship("Bill", backref="payments")
    user = db.relationship("User", backref="payments")


class UserSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = User
        load_instance = True
        exclude = ("password_hash",)

    full_name = fields.String(required=True, validate=validate.Length(min=2, max=100))
    email = fields.Email(required=True)
    phone = fields.String(required=True, validate=validate.Length(min=10, max=15))
    password = fields.String(required=True, validate=validate.Length(min=8), load_only=True)


class BillSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Bill
        load_instance = True


class PaymentSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Payment
        load_instance = True
        datetimeformat = "%Y-%m-%dT%H:%M:%S" # ISO FORMAT 


user_schema = UserSchema()
users_schema = UserSchema(many=True)
bill_schema = BillSchema()
bills_schema = BillSchema(many=True)
payment_schema = PaymentSchema()
payments_schema = PaymentSchema(many=True)


========================================
config.py
========================================

import os

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY')
    SQLALCHEMY_DATABASE_URI = os.getenv('SQLALCHEMY_DATABASE_URI')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY')

    MAIL_SERVER = os.getenv('MAIL_SERVER')
    MAIL_PORT = int(os.getenv('MAIL_PORT', '587'))
    MAIL_USERNAME = os.getenv('MAIL_USERNAME')
    MAIL_PASSWORD = os.getenv('MAIL_PASSWORD')
    MAIL_USE_TLS = True
    MAIL_USE_SSL = False

    CELERY_BROKER_URL = 'redis://localhost:6379/0'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

    # M-PESA Credentials
    MPESA_CONSUMER_KEY = os.getenv('MPESA_CONSUMER_KEY')
    MPESA_CONSUMER_SECRET = os.getenv('MPESA_CONSUMER_SECRET')
    MPESA_BUSINESS_SHORTCODE = os.getenv('MPESA_BUSINESS_SHORTCODE')  # Paybill 174379 (Test)
    MPESA_CALLBACK_URL = os.getenv('MPESA_CALLBACK_URL')
    MPESA_PASSKEY = os.getenv('MPESA_PASSKEY')  # STK Passkey



========================================
app.py
========================================

from flask import Flask
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager
from flask_mail import Mail
from flask_cors import CORS  # Import CORS
from celery import Celery
from config import Config
from models import db, bcrypt
from routes.auth_routes import auth_blueprint
from routes.bill_routes import bill_blueprint
from routes.payment_routes import payment_blueprint
from flask_marshmallow import Marshmallow


def make_celery(app):
    celery = Celery(
        app.import_name,
        broker=app.config['CELERY_BROKER_URL'],
        backend=app.config['CELERY_RESULT_BACKEND']
    )
    celery.conf.update(app.config)
    return celery


app = Flask(__name__)
app.config.from_object(Config)


db.init_app(app)
bcrypt.init_app(app)
jwt = JWTManager(app)
mail = Mail(app)

CORS(app, supports_credentials=True, origins=["http://localhost:3000"])
ma = Marshmallow(app)


celery = make_celery(app)


migrate = Migrate(app, db)


app.register_blueprint(auth_blueprint, url_prefix="/auth")
app.register_blueprint(bill_blueprint, url_prefix="/bills")
app.register_blueprint(payment_blueprint, url_prefix="/payments")


def create_tables():
    with app.app_context():
        db.create_all()


with app.app_context():
    db.create_all()

if __name__ == "__main__":
    app.run(debug=True)


========================================
migrations/env.py
========================================

import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()



========================================
routes/auth_routes.py
========================================

# routes/auth_routes.py
from flask import Blueprint, request, jsonify
from flask_restful import Api, Resource
from models import db, User, user_schema
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity, unset_jwt_cookies
import datetime

auth_blueprint = Blueprint("auth", __name__)
api = Api(auth_blueprint)

class Register(Resource):
    def post(self):
        data = request.get_json()

        errors = user_schema.validate(data)
        if errors:
            return {"message": "Validation error", "errors": errors}, 400

        if User.query.filter_by(email=data["email"]).first():
            return {"message": "Email already exists"}, 400

        if User.query.filter_by(phone=data["phone"]).first():
            return {"message": "Phone number already exists"}, 400

        new_user = User(
            full_name=data["full_name"],
            email=data["email"],
            phone=data["phone"],
            password=data["password"]
        )

        db.session.add(new_user)
        db.session.commit()

        access_token = create_access_token(identity=new_user.id, expires_delta=datetime.timedelta(days=1))
        #ADD is_new_user=True here, for initial redirect
        return jsonify({"message": "User registered successfully", "user": user_schema.dump(new_user), "access_token": access_token, "is_new_user": True})

class Login(Resource):
    def post(self):
        data = request.get_json()
        email = data.get("email")
        password = data.get("password")

        user = User.query.filter_by(email=email).first()
        if not user or not user.check_password(password):
            return {"message": "Invalid credentials"}, 401

        access_token = create_access_token(identity=user.id, expires_delta=datetime.timedelta(days=1))
        #ADD THIS LINE:
        return jsonify({"access_token": access_token, "is_new_user": False}) #  Return new user status

class Logout(Resource):
    @jwt_required()
    def post(self):
        response = jsonify({"message": "Successfully logged out"})
        unset_jwt_cookies(response)
        return response

api.add_resource(Register, "/register")
api.add_resource(Login, "/login")
api.add_resource(Logout, "/logout")


========================================
routes/payment_routes.py
========================================

# routes/payment_routes.py

from flask import Blueprint, request, jsonify
from flask_restful import Api, Resource
from models import db, Payment, Bill, User, payment_schema, payments_schema  # Import payments_schema and User
from flask_jwt_extended import jwt_required, get_jwt_identity
from utils.mpesa import initiate_mpesa_payment

payment_blueprint = Blueprint("payments", __name__)
api = Api(payment_blueprint)

class PaymentResource(Resource):
    @jwt_required()
    def post(self):
        data = request.get_json()
        user_id = get_jwt_identity()
        bill_id = data.get("bill_id")

        bill = Bill.query.filter_by(id=bill_id, user_id=user_id).first()
        if not bill:
            return {"message": "Bill not found"}, 404

        user = User.query.get(user_id)  # Get the user object to access phone number
        if not user:
            return {"message": "User not found"}, 404

        phone_number = user.phone  # Get the user's phone number

        response = initiate_mpesa_payment(bill.amount, phone_number)
        if response.get("status") == "success":
            new_payment = Payment(
                user_id=user_id,
                bill_id=bill_id,
                amount_paid=bill.amount,
                payment_reference=response.get("CheckoutRequestID"), #Use CheckoutRequestID here
                status="Pending"  # Set status to "Pending" initially
            )
            db.session.add(new_payment)
            db.session.commit()

            #Bill status does not change on payment, it is updated in the callback

            return jsonify({"message": "Payment initiated successfully", "CheckoutRequestID": response.get("CheckoutRequestID")}) #return checkout request ID
        return {"message": "Payment failed", "error": response.get("message")}, 400


class PaymentHistoryResource(Resource):  # NEW RESOURCE
    @jwt_required()
    def get(self):
        user_id = get_jwt_identity()
        payments = Payment.query.filter_by(user_id=user_id).order_by(Payment.paid_at.desc()).limit(5).all() # get the last 5 payments

        return jsonify(payments_schema.dump(payments)) #Use payments_schema to handle multiple payments

# NEW CALLBACK ROUTE
class MpesaCallbackResource(Resource):
    def post(self):
        """
        Handles the callback from M-Pesa after a transaction.
        """
        callback_data = request.get_json()
        print("M-Pesa Callback Data:", callback_data)  # Log the callback data

        # Extract relevant information from the callback
        try:
            checkout_request_id = callback_data['Body']['stkCallback']['CheckoutRequestID']
            result_code = callback_data['Body']['stkCallback']['ResultCode']
            result_desc = callback_data['Body']['stkCallback']['ResultDesc']

            # Find the payment by CheckoutRequestID
            payment = Payment.query.filter_by(payment_reference=checkout_request_id).first()

            if not payment:
                print(f"Payment with CheckoutRequestID {checkout_request_id} not found.")
                return {"message": "Payment not found"}, 404

            if result_code == 0:
                # Payment was successful
                payment.status = "Completed"

                #Update the bill
                bill = Bill.query.filter_by(id=payment.bill_id).first()
                bill.status = "Paid"


                db.session.commit()
                return {"message": "Payment successful"}, 200
            else:
                # Payment failed or was cancelled
                payment.status = "Failed"
                db.session.commit()
                print(f"Payment failed: {result_desc}")
                return {"message": f"Payment failed: {result_desc}"}, 400

        except (KeyError, TypeError) as e:
            print(f"Error processing M-Pesa callback: {e}")
            return {"message": "Invalid callback data"}, 400

api.add_resource(PaymentResource, "/pay")
api.add_resource(PaymentHistoryResource, "/history")  # NEW ROUTE
api.add_resource(MpesaCallbackResource, "/callback") #This is the callback URL


========================================
routes/bill_routes.py
========================================

# routes/bill_routes.py

from flask import Blueprint, request, jsonify
from flask_restful import Api, Resource
from models import db, Bill, bill_schema, bills_schema
from flask_jwt_extended import jwt_required, get_jwt_identity
import logging  # Import the logging module

# Configure logging
logging.basicConfig(level=logging.DEBUG)  # Set the logging level to DEBUG

bill_blueprint = Blueprint("bills", __name__)
api = Api(bill_blueprint)


class BillListResource(Resource):  # Handles the / endpoint (list of bills)
    @jwt_required()
    def post(self):
        data = request.get_json()
        user_id = get_jwt_identity()
        logging.debug(f"Received bill data: {data}")

        errors = bill_schema.validate(data)
        if errors:
            logging.debug(f"Validation errors: {errors}")  # Log the errors
            return {"errors": errors}, 400

        # Validation: Check if only one of till_number or paybill_number is provided
        payment_option = data.get("payment_option")
        paybill_number = data.get("paybill_number")
        till_number = data.get("till_number")
        account_number = data.get("account_number")  # Added Account Number

        if payment_option == "paybill":
            if not paybill_number or not account_number:
                return {"message": "Paybill requires both Paybill Number and Account Number"}, 400
            # Till number should not be present
            if till_number:
                return {"message": "Paybill should not have a Till Number"}, 400
        elif payment_option == "till":
            if not till_number:
                return {"message": "Till requires a Till Number"}, 400

            # Paybill details should not be present
            if paybill_number or account_number:
                return {"message": "Till should not have Paybill or Account Number"}, 400
        else:
            return {"message": "Invalid payment option"}, 400

        new_bill = Bill()  # Create an empty Bill object
        new_bill.user_id = user_id
        new_bill.bill_type = data["bill_type"]
        new_bill.amount = data["amount"]
        new_bill.payment_option = payment_option
        new_bill.due_date = data["due_date"]
        new_bill.status = "Pending"  # Default Status

        # Conditionally add paybill or till number
        if payment_option == "paybill":
            new_bill.paybill_number = paybill_number
            new_bill.account_number = account_number
        elif payment_option == "till":
            new_bill.till_number = till_number

        db.session.add(new_bill)
        db.session.commit()
        return jsonify({"message": "Bill added successfully", "bill": bill_schema.dump(new_bill)})

    @jwt_required()
    def get(self):
        user_id = get_jwt_identity()
        bills = Bill.query.filter_by(user_id=user_id).all()
        return jsonify(bills_schema.dump(bills))

class BillResource(Resource):  # Handles the /<string:bill_id> endpoint (single bill)
    @jwt_required()
    def get(self, bill_id):
      user_id = get_jwt_identity()
      bill = Bill.query.filter_by(id=bill_id, user_id=user_id).first()
      if not bill:
          return {"message": "Bill not found or unauthorized"}, 404
      return jsonify(bill_schema.dump(bill))

    @jwt_required()
    def delete(self, bill_id):
        user_id = get_jwt_identity()
        bill = Bill.query.filter_by(id=bill_id, user_id=user_id).first()
        if not bill:
            return {"message": "Bill not found or unauthorized"}, 404

        db.session.delete(bill)
        db.session.commit()
        return {"message": "Bill deleted successfully"}, 200

    @jwt_required()
    def put(self, bill_id):
      data = request.get_json()
      user_id = get_jwt_identity()

      bill = Bill.query.filter_by(id=bill_id, user_id=user_id).first()
      if not bill:
          return {"message": "Bill not found or unauthorized"}, 404

      # Validate data before updating
      errors = bill_schema.validate(data)
      if errors:
          return {"errors": errors}, 400

      # Validate payment option and associated data
      payment_option = data.get("payment_option")
      paybill_number = data.get("paybill_number")
      till_number = data.get("till_number")
      account_number = data.get("account_number")

      if payment_option == "paybill":
          if not paybill_number or not account_number:
              return {"message": "Paybill requires both Paybill Number and Account Number"}, 400
          if till_number:
              return {"message": "Paybill should not have a Till Number"}, 400
      elif payment_option == "till":
          if not till_number:
              return {"message": "Till requires a Till Number"}, 400
          if paybill_number or account_number:
              return {"message": "Till should not have Paybill or Account Number"}, 400
      else:
          return {"message": "Invalid payment option"}, 400

      # Update bill attributes
      bill.bill_type = data["bill_type"]
      bill.amount = data["amount"]
      bill.payment_option = payment_option
      bill.paybill_number = paybill_number
      bill.till_number = till_number
      bill.account_number = account_number
      bill.due_date = data["due_date"]
      # Do not change status in edit, keep the existing one
      # bill.status = "Pending"  # Consider not changing the status during edit

      db.session.commit()
      return jsonify({"message": "Bill updated successfully", "bill": bill_schema.dump(bill)})

api.add_resource(BillListResource, "/") #route to get multiple bills
api.add_resource(BillResource, "/<string:bill_id>") #route to get a single bill with edits, deletes and gets


========================================
utils/mpesa.py
========================================

# utils/mpesa.py
import requests
import os
import base64
from datetime import datetime

def get_mpesa_access_token():
    """
    Retrieves a fresh access token from the M-Pesa API.
    """
    consumer_key = os.getenv("MPESA_CONSUMER_KEY")
    consumer_secret = os.getenv("MPESA_CONSUMER_SECRET")

    api_URL = "https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials"

    # Safaricom expects the credentials to be base64 encoded
    encoded_string = base64.b64encode(f"{consumer_key}:{consumer_secret}".encode('utf-8')).decode('utf-8')

    headers = {"Authorization": f"Basic {encoded_string}"}

    try:
        r = requests.get(api_URL, headers=headers)
        r.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        json_response = r.json()
        print("M-Pesa API Response:", json_response)  # Debugging
        return json_response.get("access_token")
    except requests.exceptions.RequestException as e:
        print(f"M-Pesa Access Token Error: {e}")
        return None


def initiate_mpesa_payment(amount, phone_number): #Removed paybill, added phone_number
    """
    Initiates an STK Push payment request to M-Pesa.
    """
    access_token = get_mpesa_access_token()
    if not access_token:
        return {"status": "failed", "message": "Failed to obtain M-Pesa access token."}

    mpesa_url = "https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest"
    business_shortcode = os.getenv("MPESA_BUSINESS_SHORTCODE")
    passkey = os.getenv("MPESA_PASSKEY")

    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    # Generate password
    password = base64.b64encode(str(business_shortcode + passkey + timestamp).encode()).decode()

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
    }

    payload = {
        "BusinessShortCode": business_shortcode,
        "Password": password,
        "Timestamp": timestamp,
        "TransactionType": "CustomerPayBillOnline", #or CustomerBuyGoodsOnline for Till
        "Amount": int(amount), #Amount must be an integer
        "PartyA": phone_number,  # Customer phone number
        "PartyB": business_shortcode,  # Your paybill number
        "PhoneNumber": phone_number, # Customer phone number
        "CallBackURL": os.getenv("MPESA_CALLBACK_URL"), # Your callback URL
        "AccountReference": "Bill Payment",
        "TransactionDesc": "Payment of Utility Bill"
    }

    try:
        response = requests.post(mpesa_url, json=payload, headers=headers)
        response.raise_for_status()  # Raise HTTPError for bad responses
        json_response = response.json()
        print("M-Pesa STK Push Response:", json_response)  # Debugging
        if json_response.get("ResponseCode") == "0":
           return {"status": "success", "CheckoutRequestID": json_response.get("CheckoutRequestID"), "CustomerMessage": json_response.get("CustomerMessage")}
        else:
            return {"status": "failed", "message": json_response.get("ResponseDescription")}

    except requests.exceptions.RequestException as e:
        print(f"M-Pesa STK Push Error: {e}")
        return {"status": "failed", "message": str(e)}

