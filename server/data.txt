
========================================
models.py
========================================

# models.py
# server/models.py

import uuid
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_marshmallow import Marshmallow
from datetime import datetime
from marshmallow import fields, validate


db = SQLAlchemy()
bcrypt = Bcrypt()
ma = Marshmallow()


def generate_uuid():
    """Generate a UUID for primary keys"""
    return str(uuid.uuid4())


class User(db.Model):
    __tablename__ = "users"

    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)
    full_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    phone = db.Column(db.String(15), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def __init__(self, full_name, email, phone, password):
        self.id = generate_uuid()
        self.full_name = full_name
        self.email = email
        self.phone = phone
        self.password_hash = bcrypt.generate_password_hash(password).decode("utf-8")

    def check_password(self, password):
        return bcrypt.check_password_hash(self.password_hash, password)


class Bill(db.Model):
    __tablename__ = "bills"

    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)
    user_id = db.Column(db.String(36), db.ForeignKey("users.id"), nullable=False)
    bill_type = db.Column(db.String(50), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    payment_option = db.Column(db.String(50), nullable=False, default="paybill")  #'paybill' enforced
    paybill_number = db.Column(db.String(50), nullable=False) #Paybill Number enforce not null
    account_number = db.Column(db.String(50), nullable=False)  # Account Number (for Paybill) enforce not null
    due_date = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(20), default="Pending")
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    user = db.relationship("User", backref="bills")



class Payment(db.Model):
    __tablename__ = "payments"

    id = db.Column(db.String(36), primary_key=True, default=generate_uuid)
    bill_id = db.Column(db.String(36), db.ForeignKey("bills.id"), nullable=False)
    user_id = db.Column(db.String(36), db.ForeignKey("users.id"), nullable=False)
    amount_paid = db.Column(db.Float, nullable=False)
    payment_reference = db.Column(db.String(100), nullable=False) # Changed unique=True to unique=False
    mpesa_receipt_number = db.Column(db.String(100), nullable=True) #  NEW: M-Pesa transaction code
    status = db.Column(db.String(20), default="Completed")
    paid_at = db.Column(db.DateTime, default=datetime.utcnow)

    bill = db.relationship("Bill", backref="payments")
    user = db.relationship("User", backref="payments")


class UserSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = User
        load_instance = True
        exclude = ("password_hash",)

    full_name = fields.String(required=True, validate=validate.Length(min=2, max=100))
    email = fields.Email(required=True)
    phone = fields.String(required=True, validate=validate.Length(min=10, max=15))
    password = fields.String(required=True, validate=validate.Length(min=8), load_only=True)


class BillSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Bill
        load_instance = True

class PaymentSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Payment
        load_instance = True
        datetimeformat = "%Y-%m-%dT%H:%M:%S" # ISO FORMAT

class PaymentWithBillSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Payment
        load_instance = True
        datetimeformat = "%Y-%m-%dT%H:%M:%S"

    bill = fields.Nested(BillSchema) # Nest the bill schema to serialize the bill object



user_schema = UserSchema()
users_schema = UserSchema(many=True)
bill_schema = BillSchema()
bills_schema = BillSchema(many=True)
payment_schema = PaymentSchema()
payments_schema = PaymentSchema(many=True)
payment_with_bill_schema = PaymentWithBillSchema() #This may be unused but can keep if needed in the future


========================================
config.py
========================================

import os

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY')
    SQLALCHEMY_DATABASE_URI = os.getenv('SQLALCHEMY_DATABASE_URI')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY')

    MAIL_SERVER = os.getenv('MAIL_SERVER')
    MAIL_PORT = int(os.getenv('MAIL_PORT', '587'))
    MAIL_USERNAME = os.getenv('MAIL_USERNAME')
    MAIL_PASSWORD = os.getenv('MAIL_PASSWORD')
    MAIL_USE_TLS = True
    MAIL_USE_SSL = False

    CELERY_BROKER_URL = 'redis://localhost:6379/0'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

    # M-PESA Credentials
    MPESA_CONSUMER_KEY = os.getenv('MPESA_CONSUMER_KEY')
    MPESA_CONSUMER_SECRET = os.getenv('MPESA_CONSUMER_SECRET')
    MPESA_BUSINESS_SHORTCODE = os.getenv('MPESA_BUSINESS_SHORTCODE')  # Paybill 174379 (Test)
    MPESA_CALLBACK_URL = os.getenv('MPESA_CALLBACK_URL')
    MPESA_PASSKEY = os.getenv('MPESA_PASSKEY')  # STK Passkey


========================================
app.py
========================================

from flask import Flask
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager
from flask_mail import Mail
from flask_cors import CORS  # Import CORS
from celery import Celery
from config import Config
from models import db, bcrypt
from routes.auth_routes import auth_blueprint
from routes.bill_routes import bill_blueprint
from routes.payment_routes import payment_blueprint
from flask_marshmallow import Marshmallow


def make_celery(app):
    celery = Celery(
        app.import_name,
        broker=app.config['CELERY_BROKER_URL'],
        backend=app.config['CELERY_RESULT_BACKEND']
    )
    celery.conf.update(app.config)
    return celery


app = Flask(__name__)
app.config.from_object(Config)


db.init_app(app)
bcrypt.init_app(app)
jwt = JWTManager(app)
mail = Mail(app)

CORS(app, supports_credentials=True, origins=["http://localhost:3000"])
ma = Marshmallow(app)


celery = make_celery(app)


migrate = Migrate(app, db)


app.register_blueprint(auth_blueprint, url_prefix="/auth")
app.register_blueprint(bill_blueprint, url_prefix="/bills")
app.register_blueprint(payment_blueprint, url_prefix="/payments")


def create_tables():
    with app.app_context():
        db.create_all()


with app.app_context():
    db.create_all()

if __name__ == "__main__":
    app.run(debug=True)


========================================
migrations/env.py
========================================

import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()



========================================
routes/auth_routes.py
========================================

# routes/auth_routes.py
from flask import Blueprint, request, jsonify
from flask_restful import Api, Resource
from models import db, User, user_schema
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity, unset_jwt_cookies
import datetime

auth_blueprint = Blueprint("auth", __name__)
api = Api(auth_blueprint)

class Register(Resource):
    def post(self):
        data = request.get_json()

        errors = user_schema.validate(data)
        if errors:
            return {"message": "Validation error", "errors": errors}, 400

        if User.query.filter_by(email=data["email"]).first():
            return {"message": "Email already exists"}, 400

        if User.query.filter_by(phone=data["phone"]).first():
            return {"message": "Phone number already exists"}, 400

        new_user = User(
            full_name=data["full_name"],
            email=data["email"],
            phone=data["phone"],
            password=data["password"]
        )

        db.session.add(new_user)
        db.session.commit()

        access_token = create_access_token(identity=new_user.id, expires_delta=datetime.timedelta(days=1))
        #ADD is_new_user=True here, for initial redirect
        return jsonify({"message": "User registered successfully", "user": user_schema.dump(new_user), "access_token": access_token, "is_new_user": True})

class Login(Resource):
    def post(self):
        data = request.get_json()
        email = data.get("email")
        password = data.get("password")

        user = User.query.filter_by(email=email).first()
        if not user or not user.check_password(password):
            return {"message": "Invalid credentials"}, 401

        access_token = create_access_token(identity=user.id, expires_delta=datetime.timedelta(days=1))
        #ADD THIS LINE:
        return jsonify({"access_token": access_token, "is_new_user": False}) #  Return new user status

class Logout(Resource):
    @jwt_required()
    def post(self):
        response = jsonify({"message": "Successfully logged out"})
        unset_jwt_cookies(response)
        return response

api.add_resource(Register, "/register")
api.add_resource(Login, "/login")
api.add_resource(Logout, "/logout")


========================================
routes/payment_routes.py
========================================

# routes/payment_routes.py
from flask import Blueprint, request, jsonify
from flask_restful import Api, Resource
from models import db, Payment, Bill, User, payment_schema, payments_schema, PaymentWithBillSchema  # Import the new schema
from flask_jwt_extended import jwt_required, get_jwt_identity
from utils.mpesa import initiate_mpesa_payment
import logging

payment_blueprint = Blueprint("payments", __name__)
api = Api(payment_blueprint)
logging.basicConfig(level=logging.DEBUG)


class PaymentResource(Resource):
    @jwt_required()
    def post(self):
        data = request.get_json()
        user_id = get_jwt_identity()
        bill_id = data.get("bill_id")

        bill = Bill.query.filter_by(id=bill_id, user_id=user_id).first()
        if not bill:
            return {"message": "Bill not found"}, 404

        user = User.query.get(user_id)
        if not user:
            return {"message": "User not found"}, 404

        phone_number = user.phone
        logging.debug(f"Raw Phone Number from DB: {phone_number}")

        # Format the phone number to 2547xxxxxxxx
        if phone_number.startswith("+254"):
            phone_number = phone_number[1:]  # Remove the +
        elif phone_number.startswith("0"):
            phone_number = "254" + phone_number[1:]  # Add 254 and remove the leading 0
        elif phone_number.startswith("7"):
             phone_number = "254" + phone_number  #Add 254 if it starts with 7

        logging.debug(f"Formatted Phone Number: {phone_number}")
        response = initiate_mpesa_payment(bill.amount, phone_number)  

        # Only create payment record if STK push was initiated successfully
        if response.get("status") == "success":
            new_payment = Payment(
                user_id=user_id,
                bill_id=bill_id,
                amount_paid=bill.amount,
                payment_reference=response.get("CheckoutRequestID"), #Store the checkout request ID
                status="Pending"
            )
            db.session.add(new_payment)
            db.session.commit()

            return jsonify({"message": "Payment initiated successfully", "CheckoutRequestID": response.get("CheckoutRequestID")}) #return checkout request ID
        else:
            return {"message": "Payment failed", "error": response.get("message")}, 400



class PaymentHistoryResource(Resource):
    @jwt_required()
    def get(self):
        user_id = get_jwt_identity()
        payments = Payment.query.filter_by(user_id=user_id).order_by(Payment.paid_at.desc()).limit(5).all()

        # Use the new schema to serialize the payments with bill data
        return PaymentWithBillSchema(many=True).dump(payments)

class MpesaCallbackResource(Resource):
    def post(self):
        """
        Handles the callback from M-Pesa after a transaction.
        """
        callback_data = request.get_json()
        logging.info("M-Pesa Callback Data Received: %s", callback_data)  # Log the entire callback

        # Extract relevant information from the callback
        try:
            checkout_request_id = callback_data['Body']['stkCallback']['CheckoutRequestID']
            result_code = callback_data['Body']['stkCallback']['ResultCode']
            result_desc = callback_data['Body']['stkCallback']['ResultDesc']

            # **NEW: Extract the M-Pesa transaction code (adapt the path!)**
            mpesa_receipt_number = None
            try:
                for item in callback_data['Body']['stkCallback']['CallbackMetadata']['Item']:
                    if item['Name'] == 'MpesaReceiptNumber':
                        mpesa_receipt_number = item['Value']
                        break
                #mpesa_receipt_number = callback_data['Body']['stkCallback']['CallbackMetadata']['Item'][1]['Value'] # Assuming it's the second item; adapt if needed
            except (KeyError, TypeError) as e:
                logging.warning(f"MpesaReceiptNumber not found in callback data: {e}")
                #print(f"Error extracting MpesaReceiptNumber: {e}") #remove print statements
                #mpesa_receipt_number = None  # Handle the case where it's not found # keep this

            # Find the payment by CheckoutRequestID
            payment = Payment.query.filter_by(payment_reference=checkout_request_id).first()

            if not payment:
                logging.error(f"Payment with CheckoutRequestID {checkout_request_id} not found.")
                return {"message": "Payment not found"}, 404

            if result_code == 0:
                # Payment was successful
                payment.status = "Completed"

                # **NEW: Store the M-Pesa receipt number if available**
                if mpesa_receipt_number:
                    payment.mpesa_receipt_number = mpesa_receipt_number # Store in new field
                    payment.payment_reference = mpesa_receipt_number
                else:
                    logging.info("MpesaReceiptNumber not found in callback data.  Keeping CheckoutRequestID.")
                    #print("MpesaReceiptNumber not found in callback data.  Keeping CheckoutRequestID.") #remove print statements

                #Update the bill
                bill = Bill.query.filter_by(id=payment.bill_id).first()
                if bill: #check to make sure bill exists
                    bill.status = "Paid"
                else:
                    logging.error(f"Bill with ID {payment.bill_id} not found.") #log bill not found
                    return {"message": f"Bill with ID {payment.bill_id} not found"}, 404

                try:
                    db.session.commit()
                    logging.info(f"Payment {payment.id} and Bill {bill.id if bill else 'N/A'} updated successfully.")
                    #Include the bill id in the response
                    return jsonify({"message": "Payment successful",  "bill_id": bill.id}), 200  # Send the bill_id back
                except Exception as e:
                    logging.error(f"Database commit error: {e}")
                    db.session.rollback() # Rollback in case of error!
                    return {"message": "Database commit error", "error": str(e)}, 500


            else:
                # Payment failed or was cancelled
                payment.status = "Failed"
                try:
                    db.session.commit()
                    logging.info(f"Payment {payment.id} marked as Failed.")
                except Exception as e:
                    logging.error(f"Database commit error: {e}")
                    db.session.rollback() # Rollback in case of error!
                    return {"message": "Database commit error", "error": str(e)}, 500
                #db.session.commit() #committing here already so no need
                logging.error(f"Payment failed: {result_desc}")
                return {"message": f"Payment failed: {result_desc}"}, 400

        except (KeyError, TypeError) as e:
            logging.error(f"Error processing M-Pesa callback: {e}")
            return {"message": "Invalid callback data"}, 400

api.add_resource(PaymentResource, "/pay")
api.add_resource(PaymentHistoryResource, "/history")
api.add_resource(MpesaCallbackResource, "/callback") #This is the callback URL


========================================
routes/bill_routes.py
========================================

# routes/bill_routes.py

from flask import Blueprint, request, jsonify
from flask_restful import Api, Resource
from models import db, Bill, bill_schema, bills_schema
from flask_jwt_extended import jwt_required, get_jwt_identity
import logging

logging.basicConfig(level=logging.DEBUG)

bill_blueprint = Blueprint("bills", __name__)
api = Api(bill_blueprint)


class BillListResource(Resource):
    @jwt_required()
    def post(self):
        data = request.get_json()
        user_id = get_jwt_identity()
        logging.debug(f"Received bill data: {data}")

        # Validate required fields (bill_schema validation isn't sufficient)
        if not all(k in data for k in ("bill_type", "amount", "paybill_number", "account_number", "due_date")):
            return {"message": "Missing required fields"}, 400

        errors = bill_schema.validate(data)
        if errors:
            logging.debug(f"Validation errors: {errors}")
            return {"errors": errors}, 400

        # Enforce paybill payment option, always
        data["payment_option"] = "paybill"

        # Validation: Check if only paybill number and account number are provided
        paybill_number = data.get("paybill_number")
        account_number = data.get("account_number")

        if not paybill_number or not account_number:
            return {"message": "Paybill requires both Paybill Number and Account Number"}, 400

        new_bill = Bill()
        new_bill.user_id = user_id
        new_bill.bill_type = data["bill_type"]
        new_bill.amount = data["amount"]
        new_bill.payment_option = "paybill" # Enforce paybill
        new_bill.paybill_number = paybill_number
        new_bill.account_number = account_number
        new_bill.due_date = data["due_date"]
        new_bill.status = "Pending"


        db.session.add(new_bill)
        db.session.commit()
        return jsonify({"message": "Bill added successfully", "bill": bill_schema.dump(new_bill)})

    @jwt_required()
    def get(self):
        user_id = get_jwt_identity()
        bills = Bill.query.filter_by(user_id=user_id).all()
        return jsonify(bills_schema.dump(bills))

class BillResource(Resource):
    @jwt_required()
    def get(self, bill_id):
        user_id = get_jwt_identity()
        bill = Bill.query.filter_by(id=bill_id, user_id=user_id).first()
        if not bill:
            return {"message": "Bill not found or unauthorized"}, 404
        return jsonify(bill_schema.dump(bill))

    @jwt_required()
    def delete(self, bill_id):
        user_id = get_jwt_identity()
        bill = Bill.query.filter_by(id=bill_id, user_id=user_id).first()
        if not bill:
            return {"message": "Bill not found or unauthorized"}, 404

        db.session.delete(bill)
        db.session.commit()
        return {"message": "Bill deleted successfully"}, 200

    @jwt_required()
    def put(self, bill_id):
        data = request.get_json()
        user_id = get_jwt_identity()

        bill = Bill.query.filter_by(id=bill_id, user_id=user_id).first()
        if not bill:
            return {"message": "Bill not found or unauthorized"}, 404

        # Validate required fields (bill_schema validation isn't sufficient)
        if not all(k in data for k in ("bill_type", "amount", "paybill_number", "account_number", "due_date")):
            return {"message": "Missing required fields"}, 400

        errors = bill_schema.validate(data)
        if errors:
            return {"errors": errors}, 400

         # Enforce paybill payment option, always
        data["payment_option"] = "paybill"

        paybill_number = data.get("paybill_number")
        account_number = data.get("account_number")

        if not paybill_number or not account_number:
            return {"message": "Paybill requires both Paybill Number and Account Number"}, 400


        bill.bill_type = data["bill_type"]
        bill.amount = data["amount"]
        bill.payment_option = "paybill"  # Enforce paybill
        bill.paybill_number = paybill_number
        bill.account_number = account_number
        bill.due_date = data["due_date"]

        db.session.commit()
        return jsonify({"message": "Bill updated successfully", "bill": bill_schema.dump(bill)})


api.add_resource(BillListResource, "/")
api.add_resource(BillResource, "/<string:bill_id>")


========================================
utils/mpesa.py
========================================

# utils/mpesa.py
import requests
import os
import base64
from datetime import datetime
import logging

logging.basicConfig(level=logging.DEBUG)

MPESA_API_URL = "https://sandbox.safaricom.co.ke"

def get_mpesa_access_token():
    consumer_key = os.getenv("MPESA_CONSUMER_KEY")
    consumer_secret = os.getenv("MPESA_CONSUMER_SECRET")
    api_url = f"{MPESA_API_URL}/oauth/v1/generate?grant_type=client_credentials"
    encoded_credentials = base64.b64encode(f"{consumer_key}:{consumer_secret}".encode()).decode()

    try:
        response = requests.get(api_url, headers={"Authorization": f"Basic {encoded_credentials}"})
        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        return response.json().get("access_token")
    except requests.exceptions.RequestException as e:
        logging.error(f"M-Pesa Access Token Error: {e}")
        return None

def initiate_mpesa_payment(amount, phone_number):
    access_token = get_mpesa_access_token()
    if not access_token:
        return {"status": "failed", "message": "Failed to obtain M-Pesa access token."}

    business_shortcode = os.getenv("MPESA_BUSINESS_SHORTCODE")
    passkey = os.getenv("MPESA_PASSKEY")
    callback_url = os.getenv("MPESA_CALLBACK_URL")
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    password = base64.b64encode(f"{business_shortcode}{passkey}{timestamp}".encode()).decode()

    payload = {
        "BusinessShortCode": business_shortcode,
        "Password": password,
        "Timestamp": timestamp,
        "TransactionType": "CustomerPayBillOnline",
        "Amount": int(amount),
        "PartyA": phone_number,
        "PartyB": business_shortcode,
        "PhoneNumber": phone_number,
        "CallBackURL": callback_url,
        "AccountReference": "Bill Payment",
        "TransactionDesc": "Payment of Utility Bill"
    }

    headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}
    try:
        response = requests.post(f"{MPESA_API_URL}/mpesa/stkpush/v1/processrequest", json=payload, headers=headers)
        response.raise_for_status()  # Raise HTTPError for bad responses
        json_response = response.json()
        logging.debug(f"M-Pesa STK Push Payload: {payload}")
        return {
            "status": "success" if json_response.get("ResponseCode") == "0" else "failed",
            "message": json_response.get("CustomerMessage", json_response.get("ResponseDescription")),
            "CheckoutRequestID": json_response.get("CheckoutRequestID")
        }
    except requests.exceptions.RequestException as e:
        logging.error(f"M-Pesa STK Push Error: {e}")
        return {"status": "failed", "message": str(e)}

